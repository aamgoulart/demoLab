{"ast":null,"code":"import { webSocket } from 'rxjs/webSocket';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nexport class WebSocketService {\n  constructor() {\n    this.receivedData = [];\n  }\n  connect() {\n    if (!this.socket$ || this.socket$.closed) {\n      this.socket$ = webSocket(environment.webSocketUrl);\n      this.socket$.subscribe(data => {\n        this.receivedData.push(data);\n      });\n    }\n  }\n  sendMessage(message) {\n    this.socket$.next({\n      message\n    });\n  }\n  close() {\n    this.socket$.complete();\n  }\n}\nWebSocketService.ɵfac = function WebSocketService_Factory(t) {\n  return new (t || WebSocketService)();\n};\nWebSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebSocketService,\n  factory: WebSocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,SAAS,QAA0B,gBAAgB;AAC5D,SAASC,WAAW,QAAQ,8BAA8B;;AAQ1D,OAAM,MAAOC,gBAAgB;EAH7BC;IAMS,iBAAY,GAAkB,EAAE;;EAGhCC,OAAO;IACZ,IAAI,CAAC,IAAI,CAACC,OAAO,IAAI,IAAI,CAACA,OAAO,CAACC,MAAM,EAAE;MACxC,IAAI,CAACD,OAAO,GAAGL,SAAS,CAACC,WAAW,CAACM,YAAY,CAAC;MAElD,IAAI,CAACF,OAAO,CAACG,SAAS,CAAEC,IAAiB,IAAI;QAC3C,IAAI,CAACC,YAAY,CAACC,IAAI,CAACF,IAAI,CAAC;MAC9B,CAAC,CAAC;;EAEN;EAEAG,WAAW,CAACC,OAAe;IACzB,IAAI,CAACR,OAAO,CAACS,IAAI,CAAC;MAAED;IAAO,CAAE,CAAC;EAChC;EAEAE,KAAK;IACH,IAAI,CAACV,OAAO,CAACW,QAAQ,EAAE;EACzB;;AAtBWd,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAe,SAAhBf,gBAAgB;EAAAgB,YAFf;AAAM","names":["webSocket","environment","WebSocketService","constructor","connect","socket$","closed","webSocketUrl","subscribe","data","receivedData","push","sendMessage","message","next","close","complete","factory","providedIn"],"sourceRoot":"","sources":["/home/pedro/Documentos/demoLab/src/app/web-socket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\nimport { environment } from 'src/environments/environment';\ninterface MessageData {\n  message: string;\n  time?: string;\n}\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebSocketService {\n\n  private socket$!: WebSocketSubject<any>;\n  public receivedData: MessageData[] = [];\n  currentData: MessageData;\n\n  public connect(): void {\n    if (!this.socket$ || this.socket$.closed) {\n      this.socket$ = webSocket(environment.webSocketUrl);\n\n      this.socket$.subscribe((data: MessageData) => {\n        this.receivedData.push(data);\n      });\n    }\n  }\n\n  sendMessage(message: string) {\n    this.socket$.next({ message });\n  }\n\n  close() {\n    this.socket$.complete();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}