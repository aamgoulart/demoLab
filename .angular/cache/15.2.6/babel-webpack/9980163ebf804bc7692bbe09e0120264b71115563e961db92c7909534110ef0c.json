{"ast":null,"code":"import { Chart } from 'chart.js';\nimport { BaseChartDirective } from 'ng2-charts';\nimport { default as Annotation } from 'chartjs-plugin-annotation';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../web-socket.service\";\nimport * as i2 from \"ng2-charts\";\nimport * as i3 from \"@angular/material/button\";\nexport class ChartComponent {\n  constructor(webSocketService) {\n    this.webSocketService = webSocketService;\n    this.message = '';\n    this.lineChartData = {\n      datasets: [{\n        data: [],\n        label: 'Sinal A',\n        backgroundColor: 'rgba(148,159,177,0.2)',\n        borderColor: 'rgba(148,159,177,1)',\n        pointBackgroundColor: 'rgba(148,159,177,1)',\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: 'rgba(148,159,177,0.8)',\n        fill: 'origin'\n      }],\n      labels: []\n    };\n    this.lineChartOptions = {\n      elements: {\n        line: {\n          tension: 0.5\n        }\n      },\n      scales: {\n        // We use this empty structure as a placeholder for dynamic theming.\n        y: {\n          position: 'left'\n        },\n        y1: {\n          position: 'right',\n          grid: {\n            color: 'rgba(255,0,0,0.3)'\n          }\n        }\n      }\n    };\n    this.lineChartType = 'line';\n    Chart.register(Annotation);\n    this.webSocketService.connect();\n  }\n  ngOnInit() {\n    this.mostrarDados();\n  }\n  startFunction() {\n    const intervalId = setInterval(() => {\n      this.pushOne();\n      console.log(this.webSocketService.currentData);\n    }, 500);\n    setTimeout(() => {\n      clearInterval(intervalId);\n    }, 30000000);\n  }\n  pushOne() {\n    this.lineChartData.datasets.forEach((x, i) => {\n      x.data.push(this.webSocketService.currentData.message);\n      if (x.data.length > 30) {\n        x.data.shift();\n      }\n    });\n    this.lineChartData?.labels?.push(`${this.webSocketService.currentData.time}`);\n    if (this.lineChartData?.labels?.length > 31) {\n      this.lineChartData?.labels?.shift();\n    }\n    this.chart?.update();\n  }\n  mostrarDados() {\n    this.startFunction();\n    this.sendMessage(this.message);\n  }\n  sendMessage(message) {\n    this.webSocketService.sendMessage(message);\n  }\n  ngOnDestroy() {\n    this.webSocketService.close();\n  }\n}\nChartComponent.ɵfac = function ChartComponent_Factory(t) {\n  return new (t || ChartComponent)(i0.ɵɵdirectiveInject(i1.WebSocketService));\n};\nChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChartComponent,\n  selectors: [[\"app-chart\"]],\n  viewQuery: function ChartComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(BaseChartDirective, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chart = _t.first);\n    }\n  },\n  decls: 5,\n  vars: 3,\n  consts: [[1, \"container\"], [\"baseChart\", \"\", 1, \"chart\", 3, \"data\", \"options\", \"type\"], [1, \"button-row\"], [\"mat-button\", \"\", \"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"]],\n  template: function ChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"canvas\", 1);\n      i0.ɵɵelementStart(2, \"div\", 2)(3, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function ChartComponent_Template_button_click_3_listener() {\n        return ctx.mostrarDados();\n      });\n      i0.ɵɵtext(4, \"Mostrar dados\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"data\", ctx.lineChartData)(\"options\", ctx.lineChartOptions)(\"type\", ctx.lineChartType);\n    }\n  },\n  dependencies: [i2.BaseChartDirective, i3.MatButton],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Chart","BaseChartDirective","default","Annotation","ChartComponent","constructor","webSocketService","datasets","data","label","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","fill","labels","elements","line","tension","scales","y","position","y1","grid","color","register","connect","ngOnInit","mostrarDados","startFunction","intervalId","setInterval","pushOne","console","log","currentData","setTimeout","clearInterval","lineChartData","forEach","x","i","push","message","length","shift","time","chart","update","sendMessage","ngOnDestroy","close","selectors","viewQuery","i0","ctx"],"sourceRoot":"","sources":["/home/pedro/Documentos/demoLab/src/app/chart/chart.component.ts","/home/pedro/Documentos/demoLab/src/app/chart/chart.component.html"],"sourcesContent":["import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { Chart, ChartConfiguration, ChartEvent, ChartType } from 'chart.js';\nimport { BaseChartDirective } from 'ng2-charts';\n\nimport { default as Annotation } from 'chartjs-plugin-annotation';\nimport { WebSocketService } from '../web-socket.service';\n\n@Component({\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.css']\n})\nexport class ChartComponent implements OnInit , OnDestroy{\n\n  message = '';\n\n\n  constructor(public webSocketService: WebSocketService) {\n    Chart.register(Annotation)\n    this.webSocketService.connect();\n  }\n\n\n  ngOnInit(): void {\n    this.mostrarDados();\n  }\n\n  public lineChartData: ChartConfiguration['data'] = {\n    datasets: [\n      {\n        data: [],\n        label: 'Sinal A',\n        backgroundColor: 'rgba(148,159,177,0.2)',\n        borderColor: 'rgba(148,159,177,1)',\n        pointBackgroundColor: 'rgba(148,159,177,1)',\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: 'rgba(148,159,177,0.8)',\n        fill: 'origin',\n      }\n    ],\n    labels: [],\n  };\n\n  public lineChartOptions: ChartConfiguration['options'] = {\n    elements: {\n      line: {\n        tension: 0.5\n      }\n    },\n    scales: {\n      // We use this empty structure as a placeholder for dynamic theming.\n      y:\n        {\n          position: 'left',\n        },\n      y1: {\n        position: 'right',\n        grid: {\n          color: 'rgba(255,0,0,0.3)',\n        },\n\n      }\n    },\n\n  };\n\n  public lineChartType: ChartType = 'line';\n\n  @ViewChild(BaseChartDirective) chart?: BaseChartDirective;\n\n  startFunction() {\n    const intervalId = setInterval(() => {\n      this.pushOne();\n      console.log(this.webSocketService.currentData);\n    }, 500);\n\n    setTimeout(() => {\n      clearInterval(intervalId);\n    }, 30000000);\n  }\n\n  public pushOne(): void {\n    this.lineChartData.datasets.forEach((x, i) => {\n       x.data.push(this.webSocketService.currentData.message!);\n       if (x.data.length > 30) {\n        x.data.shift();\n       }\n   });\n\n\n    this.lineChartData?.labels?.push(`${ this.webSocketService.currentData.time }`);\n    if (this.lineChartData?.labels?.length! > 31) {\n      this.lineChartData?.labels?.shift();\n    }\n\n    this.chart?.update();\n  }\n\n\n  mostrarDados() {\n    this.startFunction();\n    this.sendMessage(this.message);\n  }\n\n  sendMessage(message: string) {\n    this.webSocketService.sendMessage(message);\n  }\n\n  ngOnDestroy() {\n    this.webSocketService.close();\n  }\n\n}\n","<div class=\"container\">\n  <canvas baseChart class=\"chart\"\n  [data]=\"lineChartData\"\n  [options]=\"lineChartOptions\"\n  [type]=\"lineChartType\"\n  ></canvas>\n\n<div class=\"button-row\">\n    <button mat-button mat-raised-button color=\"primary\" (click)=\"mostrarDados()\">Mostrar dados</button>\n</div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}