{"ast":null,"code":"import _asyncToGenerator from \"/home/pedro/Documentos/demoLab/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectionToken, NgModule } from '@angular/core';\nimport { from, throwError, fromEvent } from 'rxjs';\nimport { filter, mergeMap, map, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nclass BrowserWebBluetooth {\n  constructor() {\n    this.ble = navigator.bluetooth;\n    if (!this.ble) {\n      throw new Error('Your browser does not support Smart Bluetooth. See http://caniuse.com/#search=Bluetooth for more details.');\n    }\n  }\n  requestDevice(options) {\n    return this.ble.requestDevice(options);\n  }\n}\n/** @nocollapse */\nBrowserWebBluetooth.ɵfac = function BrowserWebBluetooth_Factory(t) {\n  return new (t || BrowserWebBluetooth)();\n};\n/** @nocollapse */\nBrowserWebBluetooth.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: BrowserWebBluetooth,\n  factory: BrowserWebBluetooth.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BrowserWebBluetooth, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\nclass ServerWebBluetooth {\n  static instance() {\n    // mocked object for now\n    return {};\n  }\n}\n/** @nocollapse */\nServerWebBluetooth.ɵfac = function ServerWebBluetooth_Factory(t) {\n  return new (t || ServerWebBluetooth)();\n};\n/** @nocollapse */\nServerWebBluetooth.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ServerWebBluetooth,\n  factory: ServerWebBluetooth.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ServerWebBluetooth, [{\n    type: Injectable\n  }], null, null);\n})();\nclass ConsoleLoggerService {\n  log(...args) {\n    console.log.apply(console, args);\n  }\n  error(...args) {\n    console.error.apply(console, args);\n  }\n  warn(...args) {\n    console.warn.apply(console, args);\n  }\n}\n/** @nocollapse */\nConsoleLoggerService.ɵfac = function ConsoleLoggerService_Factory(t) {\n  return new (t || ConsoleLoggerService)();\n};\n/** @nocollapse */\nConsoleLoggerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ConsoleLoggerService,\n  factory: ConsoleLoggerService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ConsoleLoggerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass NoLoggerService {\n  log(...args) {}\n  error(...args) {}\n  warn(...args) {}\n}\n/** @nocollapse */\nNoLoggerService.ɵfac = function NoLoggerService_Factory(t) {\n  return new (t || NoLoggerService)();\n};\n/** @nocollapse */\nNoLoggerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NoLoggerService,\n  factory: NoLoggerService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NoLoggerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass BluetoothCore {\n  constructor(webBle, console) {\n    this.webBle = webBle;\n    this.console = console;\n    this.device$ = new EventEmitter();\n    this.gatt$ = new EventEmitter();\n    this.characteristicValueChanges$ = new EventEmitter();\n    this.gattServer = null;\n  }\n  getDevice$() {\n    return this.device$;\n  }\n  getGATT$() {\n    return this.gatt$;\n  }\n  streamValues$() {\n    return this.characteristicValueChanges$.pipe(filter(value => value && value.byteLength > 0));\n  }\n  /**\n   * Run the discovery process and read the value form the provided service and characteristic\n   * @param options the ReadValueOptions\n   */\n  value(options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.console.log('[BLE::Info] Reading value with options %o', options);\n      if (typeof options.acceptAllDevices === 'undefined') {\n        options.acceptAllDevices = true;\n      }\n      if (typeof options.optionalServices === 'undefined') {\n        options.optionalServices = [options.service];\n      } else {\n        options.optionalServices = [...options.optionalServices];\n      }\n      _this.console.log('[BLE::Info] Reading value with options %o', options);\n      try {\n        const device = yield _this.discover({\n          acceptAllDevices: options.acceptAllDevices,\n          optionalServices: options.optionalServices\n        });\n        _this.console.log('[BLE::Info] Device info %o', device);\n        const gatt = yield _this.connectDevice(device);\n        _this.console.log('[BLE::Info] GATT info %o', gatt);\n        const primaryService = yield _this.getPrimaryService(gatt, options.service);\n        _this.console.log('[BLE::Info] Primary Service info %o', primaryService);\n        const characteristic = yield _this.getCharacteristic(primaryService, options.characteristic);\n        _this.console.log('[BLE::Info] Characteristic info %o', characteristic);\n        const value = yield characteristic.readValue();\n        _this.console.log('[BLE::Info] Value info %o', value);\n        return value;\n      } catch (error) {\n        throw new Error(error);\n      }\n    })();\n  }\n  value$(options) {\n    return from(this.value(options));\n  }\n  /**\n   * Run the discovery process.\n   *\n   * @param Options such as filters and optional services\n   * @return  The GATT server for the chosen device\n   */\n  discover(options = {}) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      options.optionalServices = options.optionalServices || ['generic_access'];\n      _this2.console.log('[BLE::Info] Requesting devices with options %o', options);\n      let device = null;\n      try {\n        device = yield _this2.webBle.requestDevice(options);\n        device.addEventListener('gattserverdisconnected', _this2.onDeviceDisconnected.bind(_this2));\n        if (device) {\n          _this2.device$.emit(device);\n        } else {\n          _this2.device$.error(`[BLE::Error] Can not get the Bluetooth Remote GATT Server. Abort.`);\n        }\n      } catch (error) {\n        _this2.console.error(error);\n      }\n      return device;\n    })();\n  }\n  /**\n   * This handler will trigger when the client disconnets from the server.\n   *\n   * @param event The onDeviceDisconnected event\n   */\n  onDeviceDisconnected(event) {\n    const disconnectedDevice = event.target;\n    this.console.log('[BLE::Info] disconnected device %o', disconnectedDevice);\n    this.device$.emit(null);\n  }\n  /**\n   * Run the discovery process.\n   *\n   * @param Options such as filters and optional services\n   * @return  Emites the value of the requested service read from the device\n   */\n  discover$(options) {\n    return from(this.discover(options)).pipe(mergeMap(device => this.connectDevice$(device)));\n  }\n  /**\n   * Connect to current device.\n   *\n   * @return  Emites the gatt server instance of the requested device\n   */\n  connectDevice(device) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (device) {\n        _this3.console.log('[BLE::Info] Connecting to Bluetooth Remote GATT Server of %o', device);\n        try {\n          const gattServer = yield device.gatt.connect();\n          _this3.gattServer = gattServer;\n          _this3.gatt$.emit(gattServer);\n          return gattServer;\n        } catch (error) {\n          // probably the user has canceled the discovery\n          Promise.reject(`${error.message}`);\n          _this3.gatt$.error(`${error.message}`);\n        }\n      } else {\n        _this3.console.error('[BLE::Error] Was not able to connect to Bluetooth Remote GATT Server');\n        _this3.gatt$.error(null);\n      }\n    })();\n  }\n  /**\n   * Connect to current device.\n   *\n   * @return  Emites the gatt server instance of the requested device\n   */\n  connectDevice$(device) {\n    return from(this.connectDevice(device));\n  }\n  /**\n   * Disconnect the current connected device\n   */\n  disconnectDevice() {\n    if (!this.gattServer) {\n      return;\n    }\n    this.console.log('[BLE::Info] Disconnecting from Bluetooth Device %o', this.gattServer);\n    if (this.gattServer.connected) {\n      this.gattServer.disconnect();\n    } else {\n      this.console.log('[BLE::Info] Bluetooth device is already disconnected');\n    }\n  }\n  /**\n   * Requests the primary service.\n   *\n   * @param gatt The BluetoothRemoteGATTServer sever\n   * @param service The UUID of the primary service\n   * @return The remote service (as a Promise)\n   */\n  getPrimaryService(gatt, service) {\n    return _asyncToGenerator(function* () {\n      try {\n        const remoteService = yield gatt.getPrimaryService(service);\n        return yield Promise.resolve(remoteService);\n      } catch (error) {\n        return yield Promise.reject(`${error.message} (${service})`);\n      }\n    })();\n  }\n  /**\n   * Requests the primary service.\n   *\n   * @param gatt The BluetoothRemoteGATTServer sever\n   * @param service The UUID of the primary service\n   * @return The remote service (as an observable).\n   */\n  getPrimaryService$(gatt, service) {\n    this.console.log('[BLE::Info] Getting primary service \"%s\" (if available) of %o', service, gatt);\n    if (gatt) {\n      return from(this.getPrimaryService(gatt, service));\n    } else {\n      return throwError(new Error('[BLE::Error] Was not able to connect to the Bluetooth Remote GATT Server'));\n    }\n  }\n  /**\n   * Requests a characteristic from the primary service.\n   *\n   * @param primaryService The primary service.\n   * @param characteristic The characteristic's UUID.\n   * @returns The characteristic description (as a Promise).\n   */\n  getCharacteristic(primaryService, characteristic) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.console.log('[BLE::Info] Getting Characteristic \"%s\" of %o', characteristic, primaryService);\n      try {\n        const char = yield primaryService.getCharacteristic(characteristic);\n        // listen for characteristic value changes\n        if (char.properties.notify) {\n          char.startNotifications().then(_ => {\n            _this4.console.log('[BLE::Info] Starting notifications of \"%s\"', characteristic);\n            char.addEventListener('characteristicvaluechanged', _this4.onCharacteristicChanged.bind(_this4));\n          }, error => {\n            Promise.reject(`${error.message} (${characteristic})`);\n          });\n        } else {\n          char.addEventListener('characteristicvaluechanged', _this4.onCharacteristicChanged.bind(_this4));\n        }\n        return char;\n      } catch (rejectionError) {\n        Promise.reject(`${rejectionError.message} (${characteristic})`);\n      }\n    })();\n  }\n  /**\n   * Requests a characteristic from the primary service.\n   *\n   * @param primaryService The primary service.\n   * @param characteristic The characteristic's UUID.\n   * @returns The characteristic description (as a Observable).\n   */\n  getCharacteristic$(primaryService, characteristic) {\n    this.console.log('[BLE::Info] Getting Characteristic \"%s\" of %o', characteristic, primaryService);\n    return from(this.getCharacteristic(primaryService, characteristic));\n  }\n  /**\n   * Sets the characteristic's state.\n   *\n   * @param service The parent service of the characteristic.\n   * @param characteristic The requested characteristic\n   * @param state An ArrayBuffer containing the value of the characteristic.\n   * @return The primary service (useful for chaining).\n   */\n  setCharacteristicState(service, characteristic, state) {\n    const primaryService = this.getPrimaryService$(this.gattServer, service);\n    primaryService\n    // tslint:disable-next-line: variable-name\n    .pipe(mergeMap(_primaryService => this.getCharacteristic$(_primaryService, characteristic)))\n    // tslint:disable-next-line: no-shadowed-variable\n    .subscribe(characteristic => this.writeValue$(characteristic, state));\n    return primaryService;\n  }\n  /**\n   * Enables the specified characteristic of a given service.\n   *\n   * @param service The parent service of the characteristic.\n   * @param characteristic The requested characteristic\n   * @return The primary service (useful for chaining).\n   */\n  enableCharacteristic(service, characteristic, state) {\n    state = state || new Uint8Array([1]);\n    return this.setCharacteristicState(service, characteristic, state);\n  }\n  /**\n   * Disables the specified characteristic of a given service.\n   *\n   * @param service The parent service of the characteristic.\n   * @param characteristic The requested characteristic.\n   * @return The primary service (useful for chaining).\n   */\n  disbaleCharacteristic(service, characteristic, state) {\n    state = state || new Uint8Array([0]);\n    return this.setCharacteristicState(service, characteristic, state);\n  }\n  /**\n   * Dispatches new values emitted by a characteristic.\n   *\n   * @param event the distpatched event.\n   */\n  onCharacteristicChanged(event) {\n    this.console.log('[BLE::Info] Dispatching new characteristic value %o', event);\n    const value = event.target.value;\n    this.characteristicValueChanges$.emit(value);\n  }\n  /**\n   * Reads a value from the characteristics, as a DataView.\n   *\n   * @param characteristic The requested characteristic.\n   * @return the DataView value (as an Observable).\n   */\n  readValue$(characteristic) {\n    this.console.log('[BLE::Info] Reading Characteristic %o', characteristic);\n    return from(characteristic.readValue().then(data => Promise.resolve(data), error => Promise.reject(`${error.message}`)));\n  }\n  /**\n   * Writes a value into the specified characteristic.\n   *\n   * @param characteristic The requested characteristic.\n   * @param value The value to be written (as an ArrayBuffer or Uint8Array).\n   * @return an void Observable.\n   */\n  writeValue$(characteristic, value) {\n    this.console.log('[BLE::Info] Writing Characteristic %o', characteristic);\n    return from(characteristic.writeValue(value).then(_ => Promise.resolve(), error => Promise.reject(`${error.message}`)));\n  }\n  /**\n   * A stream of DataView values emitted by the specified characteristic.\n   *\n   * @param characteristic The characteristic which value you want to observe\n   * @return The stream of DataView values.\n   */\n  observeValue$(characteristic) {\n    characteristic.startNotifications();\n    const disconnected = fromEvent(characteristic.service.device, 'gattserverdisconnected');\n    return fromEvent(characteristic, 'characteristicvaluechanged').pipe(map(event => event.target.value), takeUntil(disconnected));\n  }\n  /**\n   * A utility method to convert LE to an unsigned 16-bit integer values.\n   *\n   * @param data The DataView binary data.\n   * @param byteOffset The offset, in byte, from the start of the view where to read the data.\n   * @return An unsigned 16-bit integer number.\n   */\n  littleEndianToUint16(data, byteOffset) {\n    // tslint:disable-next-line:no-bitwise\n    return (this.littleEndianToUint8(data, byteOffset + 1) << 8) + this.littleEndianToUint8(data, byteOffset);\n  }\n  /**\n   * A utility method to convert LE to an unsigned 8-bit integer values.\n   *\n   * @param data The DataView binary data.\n   * @param byteOffset The offset, in byte, from the start of the view where to read the data.\n   * @return An unsigned 8-bit integer number.\n   */\n  littleEndianToUint8(data, byteOffset) {\n    return data.getUint8(byteOffset);\n  }\n  /**\n   * Sends random data (for testing purposes only).\n   *\n   * @return Random unsigned 8-bit integer values.\n   */\n  fakeNext(fakeValue) {\n    if (fakeValue === undefined) {\n      fakeValue = () => {\n        const dv = new DataView(new ArrayBuffer(8));\n        // tslint:disable-next-line:no-bitwise\n        dv.setUint8(0, Math.random() * 110 | 0);\n        return dv;\n      };\n    }\n    this.characteristicValueChanges$.emit(fakeValue());\n  }\n}\n/** @nocollapse */\nBluetoothCore.ɵfac = function BluetoothCore_Factory(t) {\n  return new (t || BluetoothCore)(i0.ɵɵinject(BrowserWebBluetooth), i0.ɵɵinject(ConsoleLoggerService));\n};\n/** @nocollapse */\nBluetoothCore.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: BluetoothCore,\n  factory: BluetoothCore.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BluetoothCore, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: BrowserWebBluetooth\n    }, {\n      type: ConsoleLoggerService\n    }];\n  }, null);\n})();\nfunction browserWebBluetooth() {\n  return new BrowserWebBluetooth();\n}\nfunction consoleLoggerServiceConfig(options) {\n  if (options && options.enableTracing) {\n    return new ConsoleLoggerService();\n  } else {\n    return new NoLoggerService();\n  }\n}\nfunction makeMeTokenInjector() {\n  return new InjectionToken('AWBOptions');\n}\nclass WebBluetoothModule {\n  static forRoot(options = {}) {\n    return {\n      ngModule: WebBluetoothModule,\n      providers: [BluetoothCore, {\n        provide: BrowserWebBluetooth,\n        useFactory: browserWebBluetooth\n      }, {\n        provide: makeMeTokenInjector,\n        useValue: options\n      }, {\n        provide: ConsoleLoggerService,\n        useFactory: consoleLoggerServiceConfig,\n        deps: [makeMeTokenInjector]\n      }]\n    };\n  }\n}\n/** @nocollapse */\nWebBluetoothModule.ɵfac = function WebBluetoothModule_Factory(t) {\n  return new (t || WebBluetoothModule)();\n};\n/** @nocollapse */\nWebBluetoothModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: WebBluetoothModule\n});\n/** @nocollapse */\nWebBluetoothModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(WebBluetoothModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule]\n    }]\n  }], null, null);\n})();\n\n// http://processors.wiki.ti.com/images/a/a8/BLE_SensorTag_GATT_Server.pdf\n// prettier-ignore\nconst TiTag = {\n  DEVICE_INFORMATION: {\n    SERVICE: 'f000180a-0451-4000-b000-000000000000',\n    SYSTEM_ID: 'f0002a23-0451-4000-b000-000000000000',\n    MODEL_NUMBER: 'f0002a24-0451-4000-b000-000000000000',\n    SERIAL_NUMBER: 'f0002a25-0451-4000-b000-000000000000',\n    FIRMWARE_REV: 'f0002a26-0451-4000-b000-000000000000',\n    HARDWARE_REV: 'f0002a27-0451-4000-b000-000000000000',\n    SOFTWARE_REV: 'f0002a28-0451-4000-b000-000000000000',\n    MANIFACTURER: 'f0002a29-0451-4000-b000-000000000000',\n    IEEE11073: 'f0002a2a-0451-4000-b000-000000000000',\n    PNP_ID: 'f0002a50-0451-4000-b000-000000000000'\n  },\n  BATTERY: {\n    SERVICE: 'f000180f-0451-4000-b000-000000000000',\n    LEVEL: 'f0002a19-0451-4000-b000-000000000000'\n  },\n  TEMPERATURE: {\n    SERVICE: 'f000aa00-0451-4000-b000-000000000000',\n    DATA: 'f000aa01-0451-4000-b000-000000000000',\n    CONFIGURATION: 'f000aa02-0451-4000-b000-000000000000',\n    PERIOD: 'f000aa03-0451-4000-b000-000000000000'\n  },\n  HUMIDITY: {\n    SERVICE: 'f000aa20-0451-4000-b000-000000000000',\n    DATA: 'f000aa21-0451-4000-b000-000000000000',\n    CONFIGURATION: 'f000aa22-0451-4000-b000-000000000000',\n    PERIOD: 'f000aa23-0451-4000-b000-000000000000'\n  },\n  BAROMETER: {\n    SERVICE: 'f000aa40-0451-4000-b000-000000000000',\n    DATA: 'f000aa41-0451-4000-b000-000000000000',\n    CONFIGURATION: 'f000aa42-0451-4000-b000-000000000000',\n    PERIOD: 'f000aa44-0451-4000-b000-000000000000'\n  },\n  // service not available in model CC2650\n  // ACCELEROMETER : {\n  //   SERVICE :                 'f000aa10-0451-4000-b000-000000000000',\n  //   DATA :                    'f000aa11-0451-4000-b000-000000000000',\n  //   CONFIGURATION :           'f000aa12-0451-4000-b000-000000000000',\n  //   PERIOD :                  'f000aa13-0451-4000-b000-000000000000'\n  // },\n  // service not available in model CC2650\n  // MAGNETOMETER : {\n  //   SERVICE :                 'f000aa30-0451-4000-b000-000000000000',\n  //   DATA :                    'f000aa31-0451-4000-b000-000000000000',\n  //   CONFIGURATION :           'f000aa32-0451-4000-b000-000000000000',\n  //   PERIOD :                  'f000aa33-0451-4000-b000-000000000000'\n  // },\n  // service not available in model CC2650\n  // GYROSCOPE : {\n  //   SERVICE :                 'f000aa50-0451-4000-b000-000000000000',\n  //   DATA :                    'f000aa51-0451-4000-b000-000000000000',\n  //   CONFIGURATION :           'f000aa52-0451-4000-b000-000000000000',\n  //   PERIOD :                  'f000aa53-0451-4000-b000-000000000000'\n  // },\n  MOVEMENT: {\n    SERVICE: 'f000aa80-0451-4000-b000-000000000000',\n    DATA: 'f000aa81-0451-4000-b000-000000000000',\n    CONFIGURATION: 'f000aa82-0451-4000-b000-000000000000',\n    PERIOD: 'f000aa83-0451-4000-b000-000000000000'\n  },\n  LIGHT: {\n    SERVICE: 'f000aa70-0451-4000-b000-000000000000',\n    DATA: 'f000aa71-0451-4000-b000-000000000000',\n    CONFIGURATION: 'f000aa72-0451-4000-b000-000000000000',\n    PERIOD: 'f000aa73-0451-4000-b000-000000000000'\n  },\n  KEYPRESS: {\n    SERVICE: 'f000ffe0-0451-4000-b000-000000000000',\n    STATE: 'f000ffe1-0451-4000-b000-000000000000'\n  },\n  __REGISTER__: {\n    SERVICE: 'f000ac00-0451-4000-b000-000000000000',\n    DATA: 'f000ac01-0451-4000-b000-000000000000',\n    ADDRESS: 'f000ac02-0451-4000-b000-000000000000',\n    DEVICE_ID: 'f000ac03-0451-4000-b000-000000000000'\n  },\n  CONTROL: {\n    SERVICE: 'f000ccc0-0451-4000-b000-000000000000',\n    CURRENT_USED_PARAMETERS: 'f000ccc1-0451-4000-b000-000000000000',\n    REQUEST_NEW_PARAMETERS: 'f000ccc2-0451-4000-b000-000000000000',\n    DISCONNECT_REQUEST: 'f000ccc3-0451-4000-b000-000000000000'\n  },\n  OAD: {\n    SERVICE: 'f000ffc0-0451-4000-b000-000000000000',\n    IMAGE_NOTIFY: 'f000ffc1-0451-4000-b000-000000000000',\n    IMAGE_BLOCK_REQUEST: 'f000ffc2-0451-4000-b000-000000000000',\n    IMAGE_COUNT: 'f000ffc3-0451-4000-b000-000000000000',\n    IMAGE_STATUS: 'f000ffc4-0451-4000-b000-000000000000'\n  },\n  IO: {\n    SERVICE: 'f000aa64-0451-4000-b000-000000000000',\n    DATA: 'f000aa65-0451-4000-b000-000000000000',\n    CONFIG: 'f000aa66-0451-4000-b000-000000000000'\n  }\n};\nconst TI_SENSORAG_SERVICES = Object.keys(TiTag).map(key => TiTag[key].SERVICE);\n\n/*\n * Fake Web Bluetooth implementation\n * Replace real browser Bluetooth objects by a much simpler objects that implement some required functionalities\n */\nclass FakeBluetoothDevice {\n  constructor(id, name) {\n    this.id = id;\n    this.name = name;\n    this.listeners = {\n      gattserverdisconnected: []\n    };\n  }\n  addEventListener(type, listener) {\n    this.listeners[type] = [...this.listeners[type], listener];\n  }\n  disconnect() {\n    const mockedEvent = {\n      target: this\n    };\n    this.listeners.gattserverdisconnected.forEach(listener => listener(mockedEvent));\n  }\n  clear() {\n    this.id = undefined;\n    this.name = undefined;\n    this.listeners = {\n      gattserverdisconnected: []\n    };\n  }\n}\nclass FakeBluetoothRemoteGATTServer {\n  constructor(device, services) {\n    this.device = device;\n    this.services = services;\n    this.connected = false;\n    device.gatt = this;\n  }\n  connect() {\n    this.connected = true;\n    return Promise.resolve(this);\n  }\n  getPrimaryService(service) {\n    return Promise.resolve(this.services[service].service);\n  }\n  disconnect() {\n    this.device.disconnect();\n    this.connected = false;\n  }\n}\nclass FakeBluetoothRemoteGATTService {\n  constructor(device, characteristics) {\n    this.device = device;\n    this.characteristics = characteristics;\n    this.characteristics.service = this;\n  }\n  getCharacteristic(characteristic) {\n    return Promise.resolve(this.characteristics[characteristic]);\n  }\n}\nclass FakeBluetoothRemoteGATTCharacteristic {\n  constructor(properties, initialValue) {\n    this.listeners = {\n      characteristicvaluechanged: []\n    };\n    this.properties = properties;\n    this.value = initialValue;\n    this.initialValue = initialValue;\n  }\n  readValue() {\n    return Promise.resolve(this.value);\n  }\n  addEventListener(type, listener) {\n    this.listeners[type] = [...this.listeners[type], listener];\n  }\n  changeValue(value) {\n    this.value = value;\n    const mockedEvent = {\n      target: this\n    };\n    this.listeners.characteristicvaluechanged.forEach(listener => listener(mockedEvent));\n  }\n  clear() {\n    this.value = this.initialValue;\n    this.listeners = {\n      characteristicvaluechanged: []\n    };\n  }\n}\n\n/*\n * Public API Surface of angular-web-bluetooth\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BluetoothCore, BrowserWebBluetooth, ConsoleLoggerService, FakeBluetoothDevice, FakeBluetoothRemoteGATTCharacteristic, FakeBluetoothRemoteGATTServer, FakeBluetoothRemoteGATTService, NoLoggerService, ServerWebBluetooth, TI_SENSORAG_SERVICES, TiTag, WebBluetoothModule, browserWebBluetooth, consoleLoggerServiceConfig, makeMeTokenInjector };","map":{"version":3,"names":["i0","Injectable","EventEmitter","InjectionToken","NgModule","from","throwError","fromEvent","filter","mergeMap","map","takeUntil","CommonModule","BrowserWebBluetooth","constructor","ble","navigator","bluetooth","Error","requestDevice","options","ɵfac","ɵprov","type","ServerWebBluetooth","instance","ConsoleLoggerService","log","args","console","apply","error","warn","providedIn","NoLoggerService","BluetoothCore","webBle","device$","gatt$","characteristicValueChanges$","gattServer","getDevice$","getGATT$","streamValues$","pipe","value","byteLength","acceptAllDevices","optionalServices","service","device","discover","gatt","connectDevice","primaryService","getPrimaryService","characteristic","getCharacteristic","readValue","value$","addEventListener","onDeviceDisconnected","bind","emit","event","disconnectedDevice","target","discover$","connectDevice$","connect","Promise","reject","message","disconnectDevice","connected","disconnect","remoteService","resolve","getPrimaryService$","char","properties","notify","startNotifications","then","_","onCharacteristicChanged","rejectionError","getCharacteristic$","setCharacteristicState","state","_primaryService","subscribe","writeValue$","enableCharacteristic","Uint8Array","disbaleCharacteristic","readValue$","data","writeValue","observeValue$","disconnected","littleEndianToUint16","byteOffset","littleEndianToUint8","getUint8","fakeNext","fakeValue","undefined","dv","DataView","ArrayBuffer","setUint8","Math","random","browserWebBluetooth","consoleLoggerServiceConfig","enableTracing","makeMeTokenInjector","WebBluetoothModule","forRoot","ngModule","providers","provide","useFactory","useValue","deps","ɵmod","ɵinj","imports","TiTag","DEVICE_INFORMATION","SERVICE","SYSTEM_ID","MODEL_NUMBER","SERIAL_NUMBER","FIRMWARE_REV","HARDWARE_REV","SOFTWARE_REV","MANIFACTURER","IEEE11073","PNP_ID","BATTERY","LEVEL","TEMPERATURE","DATA","CONFIGURATION","PERIOD","HUMIDITY","BAROMETER","MOVEMENT","LIGHT","KEYPRESS","STATE","__REGISTER__","ADDRESS","DEVICE_ID","CONTROL","CURRENT_USED_PARAMETERS","REQUEST_NEW_PARAMETERS","DISCONNECT_REQUEST","OAD","IMAGE_NOTIFY","IMAGE_BLOCK_REQUEST","IMAGE_COUNT","IMAGE_STATUS","IO","CONFIG","TI_SENSORAG_SERVICES","Object","keys","key","FakeBluetoothDevice","id","name","listeners","gattserverdisconnected","listener","mockedEvent","forEach","clear","FakeBluetoothRemoteGATTServer","services","FakeBluetoothRemoteGATTService","characteristics","FakeBluetoothRemoteGATTCharacteristic","initialValue","characteristicvaluechanged","changeValue"],"sources":["/home/pedro/Documentos/demoLab/node_modules/@manekinekko/angular-web-bluetooth/fesm2020/manekinekko-angular-web-bluetooth.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectionToken, NgModule } from '@angular/core';\nimport { from, throwError, fromEvent } from 'rxjs';\nimport { filter, mergeMap, map, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\nclass BrowserWebBluetooth {\n    constructor() {\n        this.ble = navigator.bluetooth;\n        if (!this.ble) {\n            throw new Error('Your browser does not support Smart Bluetooth. See http://caniuse.com/#search=Bluetooth for more details.');\n        }\n    }\n    requestDevice(options) {\n        return this.ble.requestDevice(options);\n    }\n}\n/** @nocollapse */ BrowserWebBluetooth.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.5\", ngImport: i0, type: BrowserWebBluetooth, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ BrowserWebBluetooth.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.5\", ngImport: i0, type: BrowserWebBluetooth });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.5\", ngImport: i0, type: BrowserWebBluetooth, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\nclass ServerWebBluetooth {\n    static instance() {\n        // mocked object for now\n        return {};\n    }\n}\n/** @nocollapse */ ServerWebBluetooth.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.5\", ngImport: i0, type: ServerWebBluetooth, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ ServerWebBluetooth.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.5\", ngImport: i0, type: ServerWebBluetooth });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.5\", ngImport: i0, type: ServerWebBluetooth, decorators: [{\n            type: Injectable\n        }] });\n\nclass ConsoleLoggerService {\n    log(...args) {\n        console.log.apply(console, args);\n    }\n    error(...args) {\n        console.error.apply(console, args);\n    }\n    warn(...args) {\n        console.warn.apply(console, args);\n    }\n}\n/** @nocollapse */ ConsoleLoggerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.5\", ngImport: i0, type: ConsoleLoggerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ ConsoleLoggerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.5\", ngImport: i0, type: ConsoleLoggerService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.5\", ngImport: i0, type: ConsoleLoggerService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\nclass NoLoggerService {\n    log(...args) { }\n    error(...args) { }\n    warn(...args) { }\n}\n/** @nocollapse */ NoLoggerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.5\", ngImport: i0, type: NoLoggerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ NoLoggerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.5\", ngImport: i0, type: NoLoggerService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.5\", ngImport: i0, type: NoLoggerService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nclass BluetoothCore {\n    constructor(webBle, console) {\n        this.webBle = webBle;\n        this.console = console;\n        this.device$ = new EventEmitter();\n        this.gatt$ = new EventEmitter();\n        this.characteristicValueChanges$ = new EventEmitter();\n        this.gattServer = null;\n    }\n    getDevice$() {\n        return this.device$;\n    }\n    getGATT$() {\n        return this.gatt$;\n    }\n    streamValues$() {\n        return this.characteristicValueChanges$.pipe(filter(value => value && value.byteLength > 0));\n    }\n    /**\n     * Run the discovery process and read the value form the provided service and characteristic\n     * @param options the ReadValueOptions\n     */\n    async value(options) {\n        this.console.log('[BLE::Info] Reading value with options %o', options);\n        if (typeof options.acceptAllDevices === 'undefined') {\n            options.acceptAllDevices = true;\n        }\n        if (typeof options.optionalServices === 'undefined') {\n            options.optionalServices = [options.service];\n        }\n        else {\n            options.optionalServices = [...options.optionalServices];\n        }\n        this.console.log('[BLE::Info] Reading value with options %o', options);\n        try {\n            const device = await this.discover({\n                acceptAllDevices: options.acceptAllDevices,\n                optionalServices: options.optionalServices\n            });\n            this.console.log('[BLE::Info] Device info %o', device);\n            const gatt = await this.connectDevice(device);\n            this.console.log('[BLE::Info] GATT info %o', gatt);\n            const primaryService = await this.getPrimaryService(gatt, options.service);\n            this.console.log('[BLE::Info] Primary Service info %o', primaryService);\n            const characteristic = await this.getCharacteristic(primaryService, options.characteristic);\n            this.console.log('[BLE::Info] Characteristic info %o', characteristic);\n            const value = await characteristic.readValue();\n            this.console.log('[BLE::Info] Value info %o', value);\n            return value;\n        }\n        catch (error) {\n            throw new Error(error);\n        }\n    }\n    value$(options) {\n        return from(this.value(options));\n    }\n    /**\n     * Run the discovery process.\n     *\n     * @param Options such as filters and optional services\n     * @return  The GATT server for the chosen device\n     */\n    async discover(options = {}) {\n        options.optionalServices = options.optionalServices || ['generic_access'];\n        this.console.log('[BLE::Info] Requesting devices with options %o', options);\n        let device = null;\n        try {\n            device = await this.webBle.requestDevice(options);\n            device.addEventListener('gattserverdisconnected', this.onDeviceDisconnected.bind(this));\n            if (device) {\n                this.device$.emit(device);\n            }\n            else {\n                this.device$.error(`[BLE::Error] Can not get the Bluetooth Remote GATT Server. Abort.`);\n            }\n        }\n        catch (error) {\n            this.console.error(error);\n        }\n        return device;\n    }\n    /**\n     * This handler will trigger when the client disconnets from the server.\n     *\n     * @param event The onDeviceDisconnected event\n     */\n    onDeviceDisconnected(event) {\n        const disconnectedDevice = event.target;\n        this.console.log('[BLE::Info] disconnected device %o', disconnectedDevice);\n        this.device$.emit(null);\n    }\n    /**\n     * Run the discovery process.\n     *\n     * @param Options such as filters and optional services\n     * @return  Emites the value of the requested service read from the device\n     */\n    discover$(options) {\n        return from(this.discover(options)).pipe(mergeMap((device) => this.connectDevice$(device)));\n    }\n    /**\n     * Connect to current device.\n     *\n     * @return  Emites the gatt server instance of the requested device\n     */\n    async connectDevice(device) {\n        if (device) {\n            this.console.log('[BLE::Info] Connecting to Bluetooth Remote GATT Server of %o', device);\n            try {\n                const gattServer = await device.gatt.connect();\n                this.gattServer = gattServer;\n                this.gatt$.emit(gattServer);\n                return gattServer;\n            }\n            catch (error) {\n                // probably the user has canceled the discovery\n                Promise.reject(`${error.message}`);\n                this.gatt$.error(`${error.message}`);\n            }\n        }\n        else {\n            this.console.error('[BLE::Error] Was not able to connect to Bluetooth Remote GATT Server');\n            this.gatt$.error(null);\n        }\n    }\n    /**\n     * Connect to current device.\n     *\n     * @return  Emites the gatt server instance of the requested device\n     */\n    connectDevice$(device) {\n        return from(this.connectDevice(device));\n    }\n    /**\n     * Disconnect the current connected device\n     */\n    disconnectDevice() {\n        if (!this.gattServer) {\n            return;\n        }\n        this.console.log('[BLE::Info] Disconnecting from Bluetooth Device %o', this.gattServer);\n        if (this.gattServer.connected) {\n            this.gattServer.disconnect();\n        }\n        else {\n            this.console.log('[BLE::Info] Bluetooth device is already disconnected');\n        }\n    }\n    /**\n     * Requests the primary service.\n     *\n     * @param gatt The BluetoothRemoteGATTServer sever\n     * @param service The UUID of the primary service\n     * @return The remote service (as a Promise)\n     */\n    async getPrimaryService(gatt, service) {\n        try {\n            const remoteService = await gatt.getPrimaryService(service);\n            return await Promise.resolve(remoteService);\n        }\n        catch (error) {\n            return await Promise.reject(`${error.message} (${service})`);\n        }\n    }\n    /**\n     * Requests the primary service.\n     *\n     * @param gatt The BluetoothRemoteGATTServer sever\n     * @param service The UUID of the primary service\n     * @return The remote service (as an observable).\n     */\n    getPrimaryService$(gatt, service) {\n        this.console.log('[BLE::Info] Getting primary service \"%s\" (if available) of %o', service, gatt);\n        if (gatt) {\n            return from(this.getPrimaryService(gatt, service));\n        }\n        else {\n            return throwError(new Error('[BLE::Error] Was not able to connect to the Bluetooth Remote GATT Server'));\n        }\n    }\n    /**\n     * Requests a characteristic from the primary service.\n     *\n     * @param primaryService The primary service.\n     * @param characteristic The characteristic's UUID.\n     * @returns The characteristic description (as a Promise).\n     */\n    async getCharacteristic(primaryService, characteristic) {\n        this.console.log('[BLE::Info] Getting Characteristic \"%s\" of %o', characteristic, primaryService);\n        try {\n            const char = await primaryService.getCharacteristic(characteristic);\n            // listen for characteristic value changes\n            if (char.properties.notify) {\n                char.startNotifications().then(_ => {\n                    this.console.log('[BLE::Info] Starting notifications of \"%s\"', characteristic);\n                    char.addEventListener('characteristicvaluechanged', this.onCharacteristicChanged.bind(this));\n                }, (error) => {\n                    Promise.reject(`${error.message} (${characteristic})`);\n                });\n            }\n            else {\n                char.addEventListener('characteristicvaluechanged', this.onCharacteristicChanged.bind(this));\n            }\n            return char;\n        }\n        catch (rejectionError) {\n            Promise.reject(`${rejectionError.message} (${characteristic})`);\n        }\n    }\n    /**\n     * Requests a characteristic from the primary service.\n     *\n     * @param primaryService The primary service.\n     * @param characteristic The characteristic's UUID.\n     * @returns The characteristic description (as a Observable).\n     */\n    getCharacteristic$(primaryService, characteristic) {\n        this.console.log('[BLE::Info] Getting Characteristic \"%s\" of %o', characteristic, primaryService);\n        return from(this.getCharacteristic(primaryService, characteristic));\n    }\n    /**\n     * Sets the characteristic's state.\n     *\n     * @param service The parent service of the characteristic.\n     * @param characteristic The requested characteristic\n     * @param state An ArrayBuffer containing the value of the characteristic.\n     * @return The primary service (useful for chaining).\n     */\n    setCharacteristicState(service, characteristic, state) {\n        const primaryService = this.getPrimaryService$(this.gattServer, service);\n        primaryService\n            // tslint:disable-next-line: variable-name\n            .pipe(mergeMap((_primaryService) => this.getCharacteristic$(_primaryService, characteristic)))\n            // tslint:disable-next-line: no-shadowed-variable\n            .subscribe((characteristic) => this.writeValue$(characteristic, state));\n        return primaryService;\n    }\n    /**\n     * Enables the specified characteristic of a given service.\n     *\n     * @param service The parent service of the characteristic.\n     * @param characteristic The requested characteristic\n     * @return The primary service (useful for chaining).\n     */\n    enableCharacteristic(service, characteristic, state) {\n        state = state || new Uint8Array([1]);\n        return this.setCharacteristicState(service, characteristic, state);\n    }\n    /**\n     * Disables the specified characteristic of a given service.\n     *\n     * @param service The parent service of the characteristic.\n     * @param characteristic The requested characteristic.\n     * @return The primary service (useful for chaining).\n     */\n    disbaleCharacteristic(service, characteristic, state) {\n        state = state || new Uint8Array([0]);\n        return this.setCharacteristicState(service, characteristic, state);\n    }\n    /**\n     * Dispatches new values emitted by a characteristic.\n     *\n     * @param event the distpatched event.\n     */\n    onCharacteristicChanged(event) {\n        this.console.log('[BLE::Info] Dispatching new characteristic value %o', event);\n        const value = event.target.value;\n        this.characteristicValueChanges$.emit(value);\n    }\n    /**\n     * Reads a value from the characteristics, as a DataView.\n     *\n     * @param characteristic The requested characteristic.\n     * @return the DataView value (as an Observable).\n     */\n    readValue$(characteristic) {\n        this.console.log('[BLE::Info] Reading Characteristic %o', characteristic);\n        return from(characteristic\n            .readValue()\n            .then((data) => Promise.resolve(data), (error) => Promise.reject(`${error.message}`)));\n    }\n    /**\n     * Writes a value into the specified characteristic.\n     *\n     * @param characteristic The requested characteristic.\n     * @param value The value to be written (as an ArrayBuffer or Uint8Array).\n     * @return an void Observable.\n     */\n    writeValue$(characteristic, value) {\n        this.console.log('[BLE::Info] Writing Characteristic %o', characteristic);\n        return from(characteristic.writeValue(value).then(_ => Promise.resolve(), (error) => Promise.reject(`${error.message}`)));\n    }\n    /**\n     * A stream of DataView values emitted by the specified characteristic.\n     *\n     * @param characteristic The characteristic which value you want to observe\n     * @return The stream of DataView values.\n     */\n    observeValue$(characteristic) {\n        characteristic.startNotifications();\n        const disconnected = fromEvent(characteristic.service.device, 'gattserverdisconnected');\n        return fromEvent(characteristic, 'characteristicvaluechanged')\n            .pipe(map((event) => event.target.value), takeUntil(disconnected));\n    }\n    /**\n     * A utility method to convert LE to an unsigned 16-bit integer values.\n     *\n     * @param data The DataView binary data.\n     * @param byteOffset The offset, in byte, from the start of the view where to read the data.\n     * @return An unsigned 16-bit integer number.\n     */\n    littleEndianToUint16(data, byteOffset) {\n        // tslint:disable-next-line:no-bitwise\n        return (this.littleEndianToUint8(data, byteOffset + 1) << 8) + this.littleEndianToUint8(data, byteOffset);\n    }\n    /**\n     * A utility method to convert LE to an unsigned 8-bit integer values.\n     *\n     * @param data The DataView binary data.\n     * @param byteOffset The offset, in byte, from the start of the view where to read the data.\n     * @return An unsigned 8-bit integer number.\n     */\n    littleEndianToUint8(data, byteOffset) {\n        return data.getUint8(byteOffset);\n    }\n    /**\n     * Sends random data (for testing purposes only).\n     *\n     * @return Random unsigned 8-bit integer values.\n     */\n    fakeNext(fakeValue) {\n        if (fakeValue === undefined) {\n            fakeValue = () => {\n                const dv = new DataView(new ArrayBuffer(8));\n                // tslint:disable-next-line:no-bitwise\n                dv.setUint8(0, (Math.random() * 110) | 0);\n                return dv;\n            };\n        }\n        this.characteristicValueChanges$.emit(fakeValue());\n    }\n}\n/** @nocollapse */ BluetoothCore.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.5\", ngImport: i0, type: BluetoothCore, deps: [{ token: BrowserWebBluetooth }, { token: ConsoleLoggerService }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ BluetoothCore.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.5\", ngImport: i0, type: BluetoothCore, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.5\", ngImport: i0, type: BluetoothCore, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: BrowserWebBluetooth }, { type: ConsoleLoggerService }]; } });\n\nfunction browserWebBluetooth() {\n    return new BrowserWebBluetooth();\n}\nfunction consoleLoggerServiceConfig(options) {\n    if (options && options.enableTracing) {\n        return new ConsoleLoggerService();\n    }\n    else {\n        return new NoLoggerService();\n    }\n}\nfunction makeMeTokenInjector() {\n    return new InjectionToken('AWBOptions');\n}\nclass WebBluetoothModule {\n    static forRoot(options = {}) {\n        return {\n            ngModule: WebBluetoothModule,\n            providers: [\n                BluetoothCore,\n                {\n                    provide: BrowserWebBluetooth,\n                    useFactory: browserWebBluetooth\n                },\n                {\n                    provide: makeMeTokenInjector,\n                    useValue: options\n                },\n                {\n                    provide: ConsoleLoggerService,\n                    useFactory: consoleLoggerServiceConfig,\n                    deps: [makeMeTokenInjector]\n                }\n            ]\n        };\n    }\n}\n/** @nocollapse */ WebBluetoothModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.5\", ngImport: i0, type: WebBluetoothModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ WebBluetoothModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.1.5\", ngImport: i0, type: WebBluetoothModule, imports: [CommonModule] });\n/** @nocollapse */ WebBluetoothModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.1.5\", ngImport: i0, type: WebBluetoothModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.5\", ngImport: i0, type: WebBluetoothModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule]\n                }]\n        }] });\n\n// http://processors.wiki.ti.com/images/a/a8/BLE_SensorTag_GATT_Server.pdf\n// prettier-ignore\nconst TiTag = {\n    DEVICE_INFORMATION: {\n        SERVICE: 'f000180a-0451-4000-b000-000000000000',\n        SYSTEM_ID: 'f0002a23-0451-4000-b000-000000000000',\n        MODEL_NUMBER: 'f0002a24-0451-4000-b000-000000000000',\n        SERIAL_NUMBER: 'f0002a25-0451-4000-b000-000000000000',\n        FIRMWARE_REV: 'f0002a26-0451-4000-b000-000000000000',\n        HARDWARE_REV: 'f0002a27-0451-4000-b000-000000000000',\n        SOFTWARE_REV: 'f0002a28-0451-4000-b000-000000000000',\n        MANIFACTURER: 'f0002a29-0451-4000-b000-000000000000',\n        IEEE11073: 'f0002a2a-0451-4000-b000-000000000000',\n        PNP_ID: 'f0002a50-0451-4000-b000-000000000000'\n    },\n    BATTERY: {\n        SERVICE: 'f000180f-0451-4000-b000-000000000000',\n        LEVEL: 'f0002a19-0451-4000-b000-000000000000'\n    },\n    TEMPERATURE: {\n        SERVICE: 'f000aa00-0451-4000-b000-000000000000',\n        DATA: 'f000aa01-0451-4000-b000-000000000000',\n        CONFIGURATION: 'f000aa02-0451-4000-b000-000000000000',\n        PERIOD: 'f000aa03-0451-4000-b000-000000000000'\n    },\n    HUMIDITY: {\n        SERVICE: 'f000aa20-0451-4000-b000-000000000000',\n        DATA: 'f000aa21-0451-4000-b000-000000000000',\n        CONFIGURATION: 'f000aa22-0451-4000-b000-000000000000',\n        PERIOD: 'f000aa23-0451-4000-b000-000000000000'\n    },\n    BAROMETER: {\n        SERVICE: 'f000aa40-0451-4000-b000-000000000000',\n        DATA: 'f000aa41-0451-4000-b000-000000000000',\n        CONFIGURATION: 'f000aa42-0451-4000-b000-000000000000',\n        PERIOD: 'f000aa44-0451-4000-b000-000000000000'\n    },\n    // service not available in model CC2650\n    // ACCELEROMETER : {\n    //   SERVICE :                 'f000aa10-0451-4000-b000-000000000000',\n    //   DATA :                    'f000aa11-0451-4000-b000-000000000000',\n    //   CONFIGURATION :           'f000aa12-0451-4000-b000-000000000000',\n    //   PERIOD :                  'f000aa13-0451-4000-b000-000000000000'\n    // },\n    // service not available in model CC2650\n    // MAGNETOMETER : {\n    //   SERVICE :                 'f000aa30-0451-4000-b000-000000000000',\n    //   DATA :                    'f000aa31-0451-4000-b000-000000000000',\n    //   CONFIGURATION :           'f000aa32-0451-4000-b000-000000000000',\n    //   PERIOD :                  'f000aa33-0451-4000-b000-000000000000'\n    // },\n    // service not available in model CC2650\n    // GYROSCOPE : {\n    //   SERVICE :                 'f000aa50-0451-4000-b000-000000000000',\n    //   DATA :                    'f000aa51-0451-4000-b000-000000000000',\n    //   CONFIGURATION :           'f000aa52-0451-4000-b000-000000000000',\n    //   PERIOD :                  'f000aa53-0451-4000-b000-000000000000'\n    // },\n    MOVEMENT: {\n        SERVICE: 'f000aa80-0451-4000-b000-000000000000',\n        DATA: 'f000aa81-0451-4000-b000-000000000000',\n        CONFIGURATION: 'f000aa82-0451-4000-b000-000000000000',\n        PERIOD: 'f000aa83-0451-4000-b000-000000000000'\n    },\n    LIGHT: {\n        SERVICE: 'f000aa70-0451-4000-b000-000000000000',\n        DATA: 'f000aa71-0451-4000-b000-000000000000',\n        CONFIGURATION: 'f000aa72-0451-4000-b000-000000000000',\n        PERIOD: 'f000aa73-0451-4000-b000-000000000000'\n    },\n    KEYPRESS: {\n        SERVICE: 'f000ffe0-0451-4000-b000-000000000000',\n        STATE: 'f000ffe1-0451-4000-b000-000000000000'\n    },\n    __REGISTER__: {\n        SERVICE: 'f000ac00-0451-4000-b000-000000000000',\n        DATA: 'f000ac01-0451-4000-b000-000000000000',\n        ADDRESS: 'f000ac02-0451-4000-b000-000000000000',\n        DEVICE_ID: 'f000ac03-0451-4000-b000-000000000000'\n    },\n    CONTROL: {\n        SERVICE: 'f000ccc0-0451-4000-b000-000000000000',\n        CURRENT_USED_PARAMETERS: 'f000ccc1-0451-4000-b000-000000000000',\n        REQUEST_NEW_PARAMETERS: 'f000ccc2-0451-4000-b000-000000000000',\n        DISCONNECT_REQUEST: 'f000ccc3-0451-4000-b000-000000000000'\n    },\n    OAD: {\n        SERVICE: 'f000ffc0-0451-4000-b000-000000000000',\n        IMAGE_NOTIFY: 'f000ffc1-0451-4000-b000-000000000000',\n        IMAGE_BLOCK_REQUEST: 'f000ffc2-0451-4000-b000-000000000000',\n        IMAGE_COUNT: 'f000ffc3-0451-4000-b000-000000000000',\n        IMAGE_STATUS: 'f000ffc4-0451-4000-b000-000000000000'\n    },\n    IO: {\n        SERVICE: 'f000aa64-0451-4000-b000-000000000000',\n        DATA: 'f000aa65-0451-4000-b000-000000000000',\n        CONFIG: 'f000aa66-0451-4000-b000-000000000000'\n    }\n};\nconst TI_SENSORAG_SERVICES = Object.keys(TiTag).map(key => TiTag[key].SERVICE);\n\n/*\n * Fake Web Bluetooth implementation\n * Replace real browser Bluetooth objects by a much simpler objects that implement some required functionalities\n */\nclass FakeBluetoothDevice {\n    constructor(id, name) {\n        this.id = id;\n        this.name = name;\n        this.listeners = {\n            gattserverdisconnected: []\n        };\n    }\n    addEventListener(type, listener) {\n        this.listeners[type] = [\n            ...this.listeners[type],\n            listener\n        ];\n    }\n    disconnect() {\n        const mockedEvent = { target: this };\n        this.listeners.gattserverdisconnected.forEach(listener => listener(mockedEvent));\n    }\n    clear() {\n        this.id = undefined;\n        this.name = undefined;\n        this.listeners = {\n            gattserverdisconnected: []\n        };\n    }\n}\nclass FakeBluetoothRemoteGATTServer {\n    constructor(device, services) {\n        this.device = device;\n        this.services = services;\n        this.connected = false;\n        device.gatt = this;\n    }\n    connect() {\n        this.connected = true;\n        return Promise.resolve(this);\n    }\n    getPrimaryService(service) {\n        return Promise.resolve(this.services[service].service);\n    }\n    disconnect() {\n        this.device.disconnect();\n        this.connected = false;\n    }\n}\nclass FakeBluetoothRemoteGATTService {\n    constructor(device, characteristics) {\n        this.device = device;\n        this.characteristics = characteristics;\n        this.characteristics.service = this;\n    }\n    getCharacteristic(characteristic) {\n        return Promise.resolve(this.characteristics[characteristic]);\n    }\n}\nclass FakeBluetoothRemoteGATTCharacteristic {\n    constructor(properties, initialValue) {\n        this.listeners = {\n            characteristicvaluechanged: []\n        };\n        this.properties = properties;\n        this.value = initialValue;\n        this.initialValue = initialValue;\n    }\n    readValue() {\n        return Promise.resolve(this.value);\n    }\n    addEventListener(type, listener) {\n        this.listeners[type] = [\n            ...this.listeners[type],\n            listener\n        ];\n    }\n    changeValue(value) {\n        this.value = value;\n        const mockedEvent = { target: this };\n        this.listeners.characteristicvaluechanged.forEach(listener => listener(mockedEvent));\n    }\n    clear() {\n        this.value = this.initialValue;\n        this.listeners = {\n            characteristicvaluechanged: []\n        };\n    }\n}\n\n/*\n * Public API Surface of angular-web-bluetooth\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BluetoothCore, BrowserWebBluetooth, ConsoleLoggerService, FakeBluetoothDevice, FakeBluetoothRemoteGATTCharacteristic, FakeBluetoothRemoteGATTServer, FakeBluetoothRemoteGATTService, NoLoggerService, ServerWebBluetooth, TI_SENSORAG_SERVICES, TiTag, WebBluetoothModule, browserWebBluetooth, consoleLoggerServiceConfig, makeMeTokenInjector };\n"],"mappings":";AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,UAAU,EAAEC,YAAY,EAAEC,cAAc,EAAEC,QAAQ,QAAQ,eAAe;AAClF,SAASC,IAAI,EAAEC,UAAU,EAAEC,SAAS,QAAQ,MAAM;AAClD,SAASC,MAAM,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,SAAS,QAAQ,gBAAgB;AACjE,SAASC,YAAY,QAAQ,iBAAiB;AAE9C,MAAMC,mBAAmB,CAAC;EACtBC,WAAW,GAAG;IACV,IAAI,CAACC,GAAG,GAAGC,SAAS,CAACC,SAAS;IAC9B,IAAI,CAAC,IAAI,CAACF,GAAG,EAAE;MACX,MAAM,IAAIG,KAAK,CAAC,2GAA2G,CAAC;IAChI;EACJ;EACAC,aAAa,CAACC,OAAO,EAAE;IACnB,OAAO,IAAI,CAACL,GAAG,CAACI,aAAa,CAACC,OAAO,CAAC;EAC1C;AACJ;AACA;AAAmBP,mBAAmB,CAACQ,IAAI;EAAA,iBAAwFR,mBAAmB;AAAA,CAAoD;AAC1M;AAAmBA,mBAAmB,CAACS,KAAK,kBAD6EtB,EAAE;EAAA,OACYa,mBAAmB;EAAA,SAAnBA,mBAAmB;AAAA,EAAG;AAC7J;EAAA,mDAFyHb,EAAE,mBAEhCa,mBAAmB,EAAc,CAAC;IACjHU,IAAI,EAAEtB;EACV,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,EAAE;EAAE,CAAC;AAAA;AAEtD,MAAMuB,kBAAkB,CAAC;EACrB,OAAOC,QAAQ,GAAG;IACd;IACA,OAAO,CAAC,CAAC;EACb;AACJ;AACA;AAAmBD,kBAAkB,CAACH,IAAI;EAAA,iBAAwFG,kBAAkB;AAAA,CAAoD;AACxM;AAAmBA,kBAAkB,CAACF,KAAK,kBAb8EtB,EAAE;EAAA,OAaWwB,kBAAkB;EAAA,SAAlBA,kBAAkB;AAAA,EAAG;AAC3J;EAAA,mDAdyHxB,EAAE,mBAchCwB,kBAAkB,EAAc,CAAC;IAChHD,IAAI,EAAEtB;EACV,CAAC,CAAC;AAAA;AAEV,MAAMyB,oBAAoB,CAAC;EACvBC,GAAG,CAAC,GAAGC,IAAI,EAAE;IACTC,OAAO,CAACF,GAAG,CAACG,KAAK,CAACD,OAAO,EAAED,IAAI,CAAC;EACpC;EACAG,KAAK,CAAC,GAAGH,IAAI,EAAE;IACXC,OAAO,CAACE,KAAK,CAACD,KAAK,CAACD,OAAO,EAAED,IAAI,CAAC;EACtC;EACAI,IAAI,CAAC,GAAGJ,IAAI,EAAE;IACVC,OAAO,CAACG,IAAI,CAACF,KAAK,CAACD,OAAO,EAAED,IAAI,CAAC;EACrC;AACJ;AACA;AAAmBF,oBAAoB,CAACL,IAAI;EAAA,iBAAwFK,oBAAoB;AAAA,CAAoD;AAC5M;AAAmBA,oBAAoB,CAACJ,KAAK,kBA9B4EtB,EAAE;EAAA,OA8Ba0B,oBAAoB;EAAA,SAApBA,oBAAoB;EAAA,YAAc;AAAM,EAAG;AACnL;EAAA,mDA/ByH1B,EAAE,mBA+BhC0B,oBAAoB,EAAc,CAAC;IAClHH,IAAI,EAAEtB,UAAU;IAChB2B,IAAI,EAAE,CAAC;MACCK,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC;AAAA;AACV,MAAMC,eAAe,CAAC;EAClBP,GAAG,CAAC,GAAGC,IAAI,EAAE,CAAE;EACfG,KAAK,CAAC,GAAGH,IAAI,EAAE,CAAE;EACjBI,IAAI,CAAC,GAAGJ,IAAI,EAAE,CAAE;AACpB;AACA;AAAmBM,eAAe,CAACb,IAAI;EAAA,iBAAwFa,eAAe;AAAA,CAAoD;AAClM;AAAmBA,eAAe,CAACZ,KAAK,kBA3CiFtB,EAAE;EAAA,OA2CQkC,eAAe;EAAA,SAAfA,eAAe;EAAA,YAAc;AAAM,EAAG;AACzK;EAAA,mDA5CyHlC,EAAE,mBA4ChCkC,eAAe,EAAc,CAAC;IAC7GX,IAAI,EAAEtB,UAAU;IAChB2B,IAAI,EAAE,CAAC;MACCK,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC;AAAA;AAEV,MAAME,aAAa,CAAC;EAChBrB,WAAW,CAACsB,MAAM,EAAEP,OAAO,EAAE;IACzB,IAAI,CAACO,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACP,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACQ,OAAO,GAAG,IAAInC,YAAY,EAAE;IACjC,IAAI,CAACoC,KAAK,GAAG,IAAIpC,YAAY,EAAE;IAC/B,IAAI,CAACqC,2BAA2B,GAAG,IAAIrC,YAAY,EAAE;IACrD,IAAI,CAACsC,UAAU,GAAG,IAAI;EAC1B;EACAC,UAAU,GAAG;IACT,OAAO,IAAI,CAACJ,OAAO;EACvB;EACAK,QAAQ,GAAG;IACP,OAAO,IAAI,CAACJ,KAAK;EACrB;EACAK,aAAa,GAAG;IACZ,OAAO,IAAI,CAACJ,2BAA2B,CAACK,IAAI,CAACpC,MAAM,CAACqC,KAAK,IAAIA,KAAK,IAAIA,KAAK,CAACC,UAAU,GAAG,CAAC,CAAC,CAAC;EAChG;EACA;AACJ;AACA;AACA;EACUD,KAAK,CAACzB,OAAO,EAAE;IAAA;IAAA;MACjB,KAAI,CAACS,OAAO,CAACF,GAAG,CAAC,2CAA2C,EAAEP,OAAO,CAAC;MACtE,IAAI,OAAOA,OAAO,CAAC2B,gBAAgB,KAAK,WAAW,EAAE;QACjD3B,OAAO,CAAC2B,gBAAgB,GAAG,IAAI;MACnC;MACA,IAAI,OAAO3B,OAAO,CAAC4B,gBAAgB,KAAK,WAAW,EAAE;QACjD5B,OAAO,CAAC4B,gBAAgB,GAAG,CAAC5B,OAAO,CAAC6B,OAAO,CAAC;MAChD,CAAC,MACI;QACD7B,OAAO,CAAC4B,gBAAgB,GAAG,CAAC,GAAG5B,OAAO,CAAC4B,gBAAgB,CAAC;MAC5D;MACA,KAAI,CAACnB,OAAO,CAACF,GAAG,CAAC,2CAA2C,EAAEP,OAAO,CAAC;MACtE,IAAI;QACA,MAAM8B,MAAM,SAAS,KAAI,CAACC,QAAQ,CAAC;UAC/BJ,gBAAgB,EAAE3B,OAAO,CAAC2B,gBAAgB;UAC1CC,gBAAgB,EAAE5B,OAAO,CAAC4B;QAC9B,CAAC,CAAC;QACF,KAAI,CAACnB,OAAO,CAACF,GAAG,CAAC,4BAA4B,EAAEuB,MAAM,CAAC;QACtD,MAAME,IAAI,SAAS,KAAI,CAACC,aAAa,CAACH,MAAM,CAAC;QAC7C,KAAI,CAACrB,OAAO,CAACF,GAAG,CAAC,0BAA0B,EAAEyB,IAAI,CAAC;QAClD,MAAME,cAAc,SAAS,KAAI,CAACC,iBAAiB,CAACH,IAAI,EAAEhC,OAAO,CAAC6B,OAAO,CAAC;QAC1E,KAAI,CAACpB,OAAO,CAACF,GAAG,CAAC,qCAAqC,EAAE2B,cAAc,CAAC;QACvE,MAAME,cAAc,SAAS,KAAI,CAACC,iBAAiB,CAACH,cAAc,EAAElC,OAAO,CAACoC,cAAc,CAAC;QAC3F,KAAI,CAAC3B,OAAO,CAACF,GAAG,CAAC,oCAAoC,EAAE6B,cAAc,CAAC;QACtE,MAAMX,KAAK,SAASW,cAAc,CAACE,SAAS,EAAE;QAC9C,KAAI,CAAC7B,OAAO,CAACF,GAAG,CAAC,2BAA2B,EAAEkB,KAAK,CAAC;QACpD,OAAOA,KAAK;MAChB,CAAC,CACD,OAAOd,KAAK,EAAE;QACV,MAAM,IAAIb,KAAK,CAACa,KAAK,CAAC;MAC1B;IAAC;EACL;EACA4B,MAAM,CAACvC,OAAO,EAAE;IACZ,OAAOf,IAAI,CAAC,IAAI,CAACwC,KAAK,CAACzB,OAAO,CAAC,CAAC;EACpC;EACA;AACJ;AACA;AACA;AACA;AACA;EACU+B,QAAQ,CAAC/B,OAAO,GAAG,CAAC,CAAC,EAAE;IAAA;IAAA;MACzBA,OAAO,CAAC4B,gBAAgB,GAAG5B,OAAO,CAAC4B,gBAAgB,IAAI,CAAC,gBAAgB,CAAC;MACzE,MAAI,CAACnB,OAAO,CAACF,GAAG,CAAC,gDAAgD,EAAEP,OAAO,CAAC;MAC3E,IAAI8B,MAAM,GAAG,IAAI;MACjB,IAAI;QACAA,MAAM,SAAS,MAAI,CAACd,MAAM,CAACjB,aAAa,CAACC,OAAO,CAAC;QACjD8B,MAAM,CAACU,gBAAgB,CAAC,wBAAwB,EAAE,MAAI,CAACC,oBAAoB,CAACC,IAAI,CAAC,MAAI,CAAC,CAAC;QACvF,IAAIZ,MAAM,EAAE;UACR,MAAI,CAACb,OAAO,CAAC0B,IAAI,CAACb,MAAM,CAAC;QAC7B,CAAC,MACI;UACD,MAAI,CAACb,OAAO,CAACN,KAAK,CAAE,mEAAkE,CAAC;QAC3F;MACJ,CAAC,CACD,OAAOA,KAAK,EAAE;QACV,MAAI,CAACF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;MAC7B;MACA,OAAOmB,MAAM;IAAC;EAClB;EACA;AACJ;AACA;AACA;AACA;EACIW,oBAAoB,CAACG,KAAK,EAAE;IACxB,MAAMC,kBAAkB,GAAGD,KAAK,CAACE,MAAM;IACvC,IAAI,CAACrC,OAAO,CAACF,GAAG,CAAC,oCAAoC,EAAEsC,kBAAkB,CAAC;IAC1E,IAAI,CAAC5B,OAAO,CAAC0B,IAAI,CAAC,IAAI,CAAC;EAC3B;EACA;AACJ;AACA;AACA;AACA;AACA;EACII,SAAS,CAAC/C,OAAO,EAAE;IACf,OAAOf,IAAI,CAAC,IAAI,CAAC8C,QAAQ,CAAC/B,OAAO,CAAC,CAAC,CAACwB,IAAI,CAACnC,QAAQ,CAAEyC,MAAM,IAAK,IAAI,CAACkB,cAAc,CAAClB,MAAM,CAAC,CAAC,CAAC;EAC/F;EACA;AACJ;AACA;AACA;AACA;EACUG,aAAa,CAACH,MAAM,EAAE;IAAA;IAAA;MACxB,IAAIA,MAAM,EAAE;QACR,MAAI,CAACrB,OAAO,CAACF,GAAG,CAAC,8DAA8D,EAAEuB,MAAM,CAAC;QACxF,IAAI;UACA,MAAMV,UAAU,SAASU,MAAM,CAACE,IAAI,CAACiB,OAAO,EAAE;UAC9C,MAAI,CAAC7B,UAAU,GAAGA,UAAU;UAC5B,MAAI,CAACF,KAAK,CAACyB,IAAI,CAACvB,UAAU,CAAC;UAC3B,OAAOA,UAAU;QACrB,CAAC,CACD,OAAOT,KAAK,EAAE;UACV;UACAuC,OAAO,CAACC,MAAM,CAAE,GAAExC,KAAK,CAACyC,OAAQ,EAAC,CAAC;UAClC,MAAI,CAAClC,KAAK,CAACP,KAAK,CAAE,GAAEA,KAAK,CAACyC,OAAQ,EAAC,CAAC;QACxC;MACJ,CAAC,MACI;QACD,MAAI,CAAC3C,OAAO,CAACE,KAAK,CAAC,sEAAsE,CAAC;QAC1F,MAAI,CAACO,KAAK,CAACP,KAAK,CAAC,IAAI,CAAC;MAC1B;IAAC;EACL;EACA;AACJ;AACA;AACA;AACA;EACIqC,cAAc,CAAClB,MAAM,EAAE;IACnB,OAAO7C,IAAI,CAAC,IAAI,CAACgD,aAAa,CAACH,MAAM,CAAC,CAAC;EAC3C;EACA;AACJ;AACA;EACIuB,gBAAgB,GAAG;IACf,IAAI,CAAC,IAAI,CAACjC,UAAU,EAAE;MAClB;IACJ;IACA,IAAI,CAACX,OAAO,CAACF,GAAG,CAAC,oDAAoD,EAAE,IAAI,CAACa,UAAU,CAAC;IACvF,IAAI,IAAI,CAACA,UAAU,CAACkC,SAAS,EAAE;MAC3B,IAAI,CAAClC,UAAU,CAACmC,UAAU,EAAE;IAChC,CAAC,MACI;MACD,IAAI,CAAC9C,OAAO,CAACF,GAAG,CAAC,sDAAsD,CAAC;IAC5E;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACU4B,iBAAiB,CAACH,IAAI,EAAEH,OAAO,EAAE;IAAA;MACnC,IAAI;QACA,MAAM2B,aAAa,SAASxB,IAAI,CAACG,iBAAiB,CAACN,OAAO,CAAC;QAC3D,aAAaqB,OAAO,CAACO,OAAO,CAACD,aAAa,CAAC;MAC/C,CAAC,CACD,OAAO7C,KAAK,EAAE;QACV,aAAauC,OAAO,CAACC,MAAM,CAAE,GAAExC,KAAK,CAACyC,OAAQ,KAAIvB,OAAQ,GAAE,CAAC;MAChE;IAAC;EACL;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI6B,kBAAkB,CAAC1B,IAAI,EAAEH,OAAO,EAAE;IAC9B,IAAI,CAACpB,OAAO,CAACF,GAAG,CAAC,+DAA+D,EAAEsB,OAAO,EAAEG,IAAI,CAAC;IAChG,IAAIA,IAAI,EAAE;MACN,OAAO/C,IAAI,CAAC,IAAI,CAACkD,iBAAiB,CAACH,IAAI,EAAEH,OAAO,CAAC,CAAC;IACtD,CAAC,MACI;MACD,OAAO3C,UAAU,CAAC,IAAIY,KAAK,CAAC,0EAA0E,CAAC,CAAC;IAC5G;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACUuC,iBAAiB,CAACH,cAAc,EAAEE,cAAc,EAAE;IAAA;IAAA;MACpD,MAAI,CAAC3B,OAAO,CAACF,GAAG,CAAC,+CAA+C,EAAE6B,cAAc,EAAEF,cAAc,CAAC;MACjG,IAAI;QACA,MAAMyB,IAAI,SAASzB,cAAc,CAACG,iBAAiB,CAACD,cAAc,CAAC;QACnE;QACA,IAAIuB,IAAI,CAACC,UAAU,CAACC,MAAM,EAAE;UACxBF,IAAI,CAACG,kBAAkB,EAAE,CAACC,IAAI,CAACC,CAAC,IAAI;YAChC,MAAI,CAACvD,OAAO,CAACF,GAAG,CAAC,4CAA4C,EAAE6B,cAAc,CAAC;YAC9EuB,IAAI,CAACnB,gBAAgB,CAAC,4BAA4B,EAAE,MAAI,CAACyB,uBAAuB,CAACvB,IAAI,CAAC,MAAI,CAAC,CAAC;UAChG,CAAC,EAAG/B,KAAK,IAAK;YACVuC,OAAO,CAACC,MAAM,CAAE,GAAExC,KAAK,CAACyC,OAAQ,KAAIhB,cAAe,GAAE,CAAC;UAC1D,CAAC,CAAC;QACN,CAAC,MACI;UACDuB,IAAI,CAACnB,gBAAgB,CAAC,4BAA4B,EAAE,MAAI,CAACyB,uBAAuB,CAACvB,IAAI,CAAC,MAAI,CAAC,CAAC;QAChG;QACA,OAAOiB,IAAI;MACf,CAAC,CACD,OAAOO,cAAc,EAAE;QACnBhB,OAAO,CAACC,MAAM,CAAE,GAAEe,cAAc,CAACd,OAAQ,KAAIhB,cAAe,GAAE,CAAC;MACnE;IAAC;EACL;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI+B,kBAAkB,CAACjC,cAAc,EAAEE,cAAc,EAAE;IAC/C,IAAI,CAAC3B,OAAO,CAACF,GAAG,CAAC,+CAA+C,EAAE6B,cAAc,EAAEF,cAAc,CAAC;IACjG,OAAOjD,IAAI,CAAC,IAAI,CAACoD,iBAAiB,CAACH,cAAc,EAAEE,cAAc,CAAC,CAAC;EACvE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIgC,sBAAsB,CAACvC,OAAO,EAAEO,cAAc,EAAEiC,KAAK,EAAE;IACnD,MAAMnC,cAAc,GAAG,IAAI,CAACwB,kBAAkB,CAAC,IAAI,CAACtC,UAAU,EAAES,OAAO,CAAC;IACxEK;IACI;IAAA,CACCV,IAAI,CAACnC,QAAQ,CAAEiF,eAAe,IAAK,IAAI,CAACH,kBAAkB,CAACG,eAAe,EAAElC,cAAc,CAAC,CAAC;IAC7F;IAAA,CACCmC,SAAS,CAAEnC,cAAc,IAAK,IAAI,CAACoC,WAAW,CAACpC,cAAc,EAAEiC,KAAK,CAAC,CAAC;IAC3E,OAAOnC,cAAc;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIuC,oBAAoB,CAAC5C,OAAO,EAAEO,cAAc,EAAEiC,KAAK,EAAE;IACjDA,KAAK,GAAGA,KAAK,IAAI,IAAIK,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,OAAO,IAAI,CAACN,sBAAsB,CAACvC,OAAO,EAAEO,cAAc,EAAEiC,KAAK,CAAC;EACtE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIM,qBAAqB,CAAC9C,OAAO,EAAEO,cAAc,EAAEiC,KAAK,EAAE;IAClDA,KAAK,GAAGA,KAAK,IAAI,IAAIK,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,OAAO,IAAI,CAACN,sBAAsB,CAACvC,OAAO,EAAEO,cAAc,EAAEiC,KAAK,CAAC;EACtE;EACA;AACJ;AACA;AACA;AACA;EACIJ,uBAAuB,CAACrB,KAAK,EAAE;IAC3B,IAAI,CAACnC,OAAO,CAACF,GAAG,CAAC,qDAAqD,EAAEqC,KAAK,CAAC;IAC9E,MAAMnB,KAAK,GAAGmB,KAAK,CAACE,MAAM,CAACrB,KAAK;IAChC,IAAI,CAACN,2BAA2B,CAACwB,IAAI,CAAClB,KAAK,CAAC;EAChD;EACA;AACJ;AACA;AACA;AACA;AACA;EACImD,UAAU,CAACxC,cAAc,EAAE;IACvB,IAAI,CAAC3B,OAAO,CAACF,GAAG,CAAC,uCAAuC,EAAE6B,cAAc,CAAC;IACzE,OAAOnD,IAAI,CAACmD,cAAc,CACrBE,SAAS,EAAE,CACXyB,IAAI,CAAEc,IAAI,IAAK3B,OAAO,CAACO,OAAO,CAACoB,IAAI,CAAC,EAAGlE,KAAK,IAAKuC,OAAO,CAACC,MAAM,CAAE,GAAExC,KAAK,CAACyC,OAAQ,EAAC,CAAC,CAAC,CAAC;EAC9F;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIoB,WAAW,CAACpC,cAAc,EAAEX,KAAK,EAAE;IAC/B,IAAI,CAAChB,OAAO,CAACF,GAAG,CAAC,uCAAuC,EAAE6B,cAAc,CAAC;IACzE,OAAOnD,IAAI,CAACmD,cAAc,CAAC0C,UAAU,CAACrD,KAAK,CAAC,CAACsC,IAAI,CAACC,CAAC,IAAId,OAAO,CAACO,OAAO,EAAE,EAAG9C,KAAK,IAAKuC,OAAO,CAACC,MAAM,CAAE,GAAExC,KAAK,CAACyC,OAAQ,EAAC,CAAC,CAAC,CAAC;EAC7H;EACA;AACJ;AACA;AACA;AACA;AACA;EACI2B,aAAa,CAAC3C,cAAc,EAAE;IAC1BA,cAAc,CAAC0B,kBAAkB,EAAE;IACnC,MAAMkB,YAAY,GAAG7F,SAAS,CAACiD,cAAc,CAACP,OAAO,CAACC,MAAM,EAAE,wBAAwB,CAAC;IACvF,OAAO3C,SAAS,CAACiD,cAAc,EAAE,4BAA4B,CAAC,CACzDZ,IAAI,CAAClC,GAAG,CAAEsD,KAAK,IAAKA,KAAK,CAACE,MAAM,CAACrB,KAAK,CAAC,EAAElC,SAAS,CAACyF,YAAY,CAAC,CAAC;EAC1E;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,oBAAoB,CAACJ,IAAI,EAAEK,UAAU,EAAE;IACnC;IACA,OAAO,CAAC,IAAI,CAACC,mBAAmB,CAACN,IAAI,EAAEK,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAACC,mBAAmB,CAACN,IAAI,EAAEK,UAAU,CAAC;EAC7G;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,mBAAmB,CAACN,IAAI,EAAEK,UAAU,EAAE;IAClC,OAAOL,IAAI,CAACO,QAAQ,CAACF,UAAU,CAAC;EACpC;EACA;AACJ;AACA;AACA;AACA;EACIG,QAAQ,CAACC,SAAS,EAAE;IAChB,IAAIA,SAAS,KAAKC,SAAS,EAAE;MACzBD,SAAS,GAAG,MAAM;QACd,MAAME,EAAE,GAAG,IAAIC,QAAQ,CAAC,IAAIC,WAAW,CAAC,CAAC,CAAC,CAAC;QAC3C;QACAF,EAAE,CAACG,QAAQ,CAAC,CAAC,EAAGC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,GAAI,CAAC,CAAC;QACzC,OAAOL,EAAE;MACb,CAAC;IACL;IACA,IAAI,CAACrE,2BAA2B,CAACwB,IAAI,CAAC2C,SAAS,EAAE,CAAC;EACtD;AACJ;AACA;AAAmBvE,aAAa,CAACd,IAAI;EAAA,iBAAwFc,aAAa,EA1YjBnC,EAAE,UA0YiCa,mBAAmB,GA1YtDb,EAAE,UA0YiE0B,oBAAoB;AAAA,CAA6C;AAC7P;AAAmBS,aAAa,CAACb,KAAK,kBA3YmFtB,EAAE;EAAA,OA2YMmC,aAAa;EAAA,SAAbA,aAAa;EAAA,YAAc;AAAM,EAAG;AACrK;EAAA,mDA5YyHnC,EAAE,mBA4YhCmC,aAAa,EAAc,CAAC;IAC3GZ,IAAI,EAAEtB,UAAU;IAChB2B,IAAI,EAAE,CAAC;MACCK,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEV,IAAI,EAAEV;IAAoB,CAAC,EAAE;MAAEU,IAAI,EAAEG;IAAqB,CAAC,CAAC;EAAE,CAAC;AAAA;AAEnH,SAASwF,mBAAmB,GAAG;EAC3B,OAAO,IAAIrG,mBAAmB,EAAE;AACpC;AACA,SAASsG,0BAA0B,CAAC/F,OAAO,EAAE;EACzC,IAAIA,OAAO,IAAIA,OAAO,CAACgG,aAAa,EAAE;IAClC,OAAO,IAAI1F,oBAAoB,EAAE;EACrC,CAAC,MACI;IACD,OAAO,IAAIQ,eAAe,EAAE;EAChC;AACJ;AACA,SAASmF,mBAAmB,GAAG;EAC3B,OAAO,IAAIlH,cAAc,CAAC,YAAY,CAAC;AAC3C;AACA,MAAMmH,kBAAkB,CAAC;EACrB,OAAOC,OAAO,CAACnG,OAAO,GAAG,CAAC,CAAC,EAAE;IACzB,OAAO;MACHoG,QAAQ,EAAEF,kBAAkB;MAC5BG,SAAS,EAAE,CACPtF,aAAa,EACb;QACIuF,OAAO,EAAE7G,mBAAmB;QAC5B8G,UAAU,EAAET;MAChB,CAAC,EACD;QACIQ,OAAO,EAAEL,mBAAmB;QAC5BO,QAAQ,EAAExG;MACd,CAAC,EACD;QACIsG,OAAO,EAAEhG,oBAAoB;QAC7BiG,UAAU,EAAER,0BAA0B;QACtCU,IAAI,EAAE,CAACR,mBAAmB;MAC9B,CAAC;IAET,CAAC;EACL;AACJ;AACA;AAAmBC,kBAAkB,CAACjG,IAAI;EAAA,iBAAwFiG,kBAAkB;AAAA,CAAkD;AACtM;AAAmBA,kBAAkB,CAACQ,IAAI,kBAzb+E9H,EAAE;EAAA,MAybQsH;AAAkB,EAA4B;AACjL;AAAmBA,kBAAkB,CAACS,IAAI,kBA1b+E/H,EAAE;EAAA,UA0bsCY,YAAY;AAAA,EAAI;AACjL;EAAA,mDA3byHZ,EAAE,mBA2bhCsH,kBAAkB,EAAc,CAAC;IAChH/F,IAAI,EAAEnB,QAAQ;IACdwB,IAAI,EAAE,CAAC;MACCoG,OAAO,EAAE,CAACpH,YAAY;IAC1B,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA,MAAMqH,KAAK,GAAG;EACVC,kBAAkB,EAAE;IAChBC,OAAO,EAAE,sCAAsC;IAC/CC,SAAS,EAAE,sCAAsC;IACjDC,YAAY,EAAE,sCAAsC;IACpDC,aAAa,EAAE,sCAAsC;IACrDC,YAAY,EAAE,sCAAsC;IACpDC,YAAY,EAAE,sCAAsC;IACpDC,YAAY,EAAE,sCAAsC;IACpDC,YAAY,EAAE,sCAAsC;IACpDC,SAAS,EAAE,sCAAsC;IACjDC,MAAM,EAAE;EACZ,CAAC;EACDC,OAAO,EAAE;IACLV,OAAO,EAAE,sCAAsC;IAC/CW,KAAK,EAAE;EACX,CAAC;EACDC,WAAW,EAAE;IACTZ,OAAO,EAAE,sCAAsC;IAC/Ca,IAAI,EAAE,sCAAsC;IAC5CC,aAAa,EAAE,sCAAsC;IACrDC,MAAM,EAAE;EACZ,CAAC;EACDC,QAAQ,EAAE;IACNhB,OAAO,EAAE,sCAAsC;IAC/Ca,IAAI,EAAE,sCAAsC;IAC5CC,aAAa,EAAE,sCAAsC;IACrDC,MAAM,EAAE;EACZ,CAAC;EACDE,SAAS,EAAE;IACPjB,OAAO,EAAE,sCAAsC;IAC/Ca,IAAI,EAAE,sCAAsC;IAC5CC,aAAa,EAAE,sCAAsC;IACrDC,MAAM,EAAE;EACZ,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAG,QAAQ,EAAE;IACNlB,OAAO,EAAE,sCAAsC;IAC/Ca,IAAI,EAAE,sCAAsC;IAC5CC,aAAa,EAAE,sCAAsC;IACrDC,MAAM,EAAE;EACZ,CAAC;EACDI,KAAK,EAAE;IACHnB,OAAO,EAAE,sCAAsC;IAC/Ca,IAAI,EAAE,sCAAsC;IAC5CC,aAAa,EAAE,sCAAsC;IACrDC,MAAM,EAAE;EACZ,CAAC;EACDK,QAAQ,EAAE;IACNpB,OAAO,EAAE,sCAAsC;IAC/CqB,KAAK,EAAE;EACX,CAAC;EACDC,YAAY,EAAE;IACVtB,OAAO,EAAE,sCAAsC;IAC/Ca,IAAI,EAAE,sCAAsC;IAC5CU,OAAO,EAAE,sCAAsC;IAC/CC,SAAS,EAAE;EACf,CAAC;EACDC,OAAO,EAAE;IACLzB,OAAO,EAAE,sCAAsC;IAC/C0B,uBAAuB,EAAE,sCAAsC;IAC/DC,sBAAsB,EAAE,sCAAsC;IAC9DC,kBAAkB,EAAE;EACxB,CAAC;EACDC,GAAG,EAAE;IACD7B,OAAO,EAAE,sCAAsC;IAC/C8B,YAAY,EAAE,sCAAsC;IACpDC,mBAAmB,EAAE,sCAAsC;IAC3DC,WAAW,EAAE,sCAAsC;IACnDC,YAAY,EAAE;EAClB,CAAC;EACDC,EAAE,EAAE;IACAlC,OAAO,EAAE,sCAAsC;IAC/Ca,IAAI,EAAE,sCAAsC;IAC5CsB,MAAM,EAAE;EACZ;AACJ,CAAC;AACD,MAAMC,oBAAoB,GAAGC,MAAM,CAACC,IAAI,CAACxC,KAAK,CAAC,CAACvH,GAAG,CAACgK,GAAG,IAAIzC,KAAK,CAACyC,GAAG,CAAC,CAACvC,OAAO,CAAC;;AAE9E;AACA;AACA;AACA;AACA,MAAMwC,mBAAmB,CAAC;EACtB7J,WAAW,CAAC8J,EAAE,EAAEC,IAAI,EAAE;IAClB,IAAI,CAACD,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,SAAS,GAAG;MACbC,sBAAsB,EAAE;IAC5B,CAAC;EACL;EACAnH,gBAAgB,CAACrC,IAAI,EAAEyJ,QAAQ,EAAE;IAC7B,IAAI,CAACF,SAAS,CAACvJ,IAAI,CAAC,GAAG,CACnB,GAAG,IAAI,CAACuJ,SAAS,CAACvJ,IAAI,CAAC,EACvByJ,QAAQ,CACX;EACL;EACArG,UAAU,GAAG;IACT,MAAMsG,WAAW,GAAG;MAAE/G,MAAM,EAAE;IAAK,CAAC;IACpC,IAAI,CAAC4G,SAAS,CAACC,sBAAsB,CAACG,OAAO,CAACF,QAAQ,IAAIA,QAAQ,CAACC,WAAW,CAAC,CAAC;EACpF;EACAE,KAAK,GAAG;IACJ,IAAI,CAACP,EAAE,GAAGjE,SAAS;IACnB,IAAI,CAACkE,IAAI,GAAGlE,SAAS;IACrB,IAAI,CAACmE,SAAS,GAAG;MACbC,sBAAsB,EAAE;IAC5B,CAAC;EACL;AACJ;AACA,MAAMK,6BAA6B,CAAC;EAChCtK,WAAW,CAACoC,MAAM,EAAEmI,QAAQ,EAAE;IAC1B,IAAI,CAACnI,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACmI,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAAC3G,SAAS,GAAG,KAAK;IACtBxB,MAAM,CAACE,IAAI,GAAG,IAAI;EACtB;EACAiB,OAAO,GAAG;IACN,IAAI,CAACK,SAAS,GAAG,IAAI;IACrB,OAAOJ,OAAO,CAACO,OAAO,CAAC,IAAI,CAAC;EAChC;EACAtB,iBAAiB,CAACN,OAAO,EAAE;IACvB,OAAOqB,OAAO,CAACO,OAAO,CAAC,IAAI,CAACwG,QAAQ,CAACpI,OAAO,CAAC,CAACA,OAAO,CAAC;EAC1D;EACA0B,UAAU,GAAG;IACT,IAAI,CAACzB,MAAM,CAACyB,UAAU,EAAE;IACxB,IAAI,CAACD,SAAS,GAAG,KAAK;EAC1B;AACJ;AACA,MAAM4G,8BAA8B,CAAC;EACjCxK,WAAW,CAACoC,MAAM,EAAEqI,eAAe,EAAE;IACjC,IAAI,CAACrI,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACqI,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACA,eAAe,CAACtI,OAAO,GAAG,IAAI;EACvC;EACAQ,iBAAiB,CAACD,cAAc,EAAE;IAC9B,OAAOc,OAAO,CAACO,OAAO,CAAC,IAAI,CAAC0G,eAAe,CAAC/H,cAAc,CAAC,CAAC;EAChE;AACJ;AACA,MAAMgI,qCAAqC,CAAC;EACxC1K,WAAW,CAACkE,UAAU,EAAEyG,YAAY,EAAE;IAClC,IAAI,CAACX,SAAS,GAAG;MACbY,0BAA0B,EAAE;IAChC,CAAC;IACD,IAAI,CAAC1G,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACnC,KAAK,GAAG4I,YAAY;IACzB,IAAI,CAACA,YAAY,GAAGA,YAAY;EACpC;EACA/H,SAAS,GAAG;IACR,OAAOY,OAAO,CAACO,OAAO,CAAC,IAAI,CAAChC,KAAK,CAAC;EACtC;EACAe,gBAAgB,CAACrC,IAAI,EAAEyJ,QAAQ,EAAE;IAC7B,IAAI,CAACF,SAAS,CAACvJ,IAAI,CAAC,GAAG,CACnB,GAAG,IAAI,CAACuJ,SAAS,CAACvJ,IAAI,CAAC,EACvByJ,QAAQ,CACX;EACL;EACAW,WAAW,CAAC9I,KAAK,EAAE;IACf,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,MAAMoI,WAAW,GAAG;MAAE/G,MAAM,EAAE;IAAK,CAAC;IACpC,IAAI,CAAC4G,SAAS,CAACY,0BAA0B,CAACR,OAAO,CAACF,QAAQ,IAAIA,QAAQ,CAACC,WAAW,CAAC,CAAC;EACxF;EACAE,KAAK,GAAG;IACJ,IAAI,CAACtI,KAAK,GAAG,IAAI,CAAC4I,YAAY;IAC9B,IAAI,CAACX,SAAS,GAAG;MACbY,0BAA0B,EAAE;IAChC,CAAC;EACL;AACJ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASvJ,aAAa,EAAEtB,mBAAmB,EAAEa,oBAAoB,EAAEiJ,mBAAmB,EAAEa,qCAAqC,EAAEJ,6BAA6B,EAAEE,8BAA8B,EAAEpJ,eAAe,EAAEV,kBAAkB,EAAE+I,oBAAoB,EAAEtC,KAAK,EAAEX,kBAAkB,EAAEJ,mBAAmB,EAAEC,0BAA0B,EAAEE,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}