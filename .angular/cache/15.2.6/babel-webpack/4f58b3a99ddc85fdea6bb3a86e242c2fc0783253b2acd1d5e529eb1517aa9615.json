{"ast":null,"code":"import { BaseChartDirective } from 'ng2-charts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../web-socket.service\";\nimport * as i2 from \"ng2-charts\";\n// import DataLabelsPlugin from 'chartjs-plugin-datalabels';\nexport class BarChartComponent {\n  constructor(webSocketService) {\n    this.webSocketService = webSocketService;\n    this.barChartOptions = {\n      responsive: true,\n      // We use these empty structures as placeholders for dynamic theming.\n      scales: {\n        x: {},\n        y: {}\n      },\n      plugins: {\n        legend: {\n          display: true\n        }\n      }\n    };\n    this.barChartType = 'bar';\n    this.barChartData = {\n      labels: [],\n      datasets: [{\n        data: [],\n        label: 'Sinal A',\n        barPercentage: 0.09\n      }]\n    };\n    this.webSocketService.conectarWsLento();\n  }\n  ngOnDestroy() {\n    this.webSocketService.fecharComunicacao();\n  }\n  ngOnInit() {\n    this.sendMessage(\"\");\n    this.startFunction();\n  }\n  sendMessage(message) {\n    this.webSocketService.sendMessage(message);\n  }\n  adicionaNovoElemento() {\n    this.barChartData.datasets[0].data.push(this.webSocketService.valorAtual.message);\n    if (this.barChartData.datasets[0].data.length > 30) {\n      this.barChartData.datasets[0].data.shift();\n    }\n    this.barChartData?.labels?.push(`${this.webSocketService.valorAtual.time}`);\n    if (this.barChartData?.labels?.length > 31) {\n      this.barChartData?.labels?.shift();\n    }\n    this.chart?.update();\n  }\n  startFunction() {\n    const intervalId = setInterval(() => {\n      this.adicionaNovoElemento();\n    }, 500);\n    setTimeout(() => {\n      clearInterval(intervalId);\n    }, 30000000);\n  }\n}\nBarChartComponent.ɵfac = function BarChartComponent_Factory(t) {\n  return new (t || BarChartComponent)(i0.ɵɵdirectiveInject(i1.WebSocketService));\n};\nBarChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BarChartComponent,\n  selectors: [[\"app-bar-chart\"]],\n  viewQuery: function BarChartComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(BaseChartDirective, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chart = _t.first);\n    }\n  },\n  decls: 2,\n  vars: 3,\n  consts: [[1, \"container\"], [\"baseChart\", \"\", 1, \"chart\", 3, \"data\", \"options\", \"type\"]],\n  template: function BarChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"canvas\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"data\", ctx.barChartData)(\"options\", ctx.barChartOptions)(\"type\", ctx.barChartType);\n    }\n  },\n  dependencies: [i2.BaseChartDirective],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAEA,SAASA,kBAAkB,QAAQ,YAAY;;;;AAI/C;AAOA,OAAM,MAAOC,iBAAiB;EAE5BC,YAAmBC,gBAAkC;IAAlC,qBAAgB,GAAhBA,gBAAgB;IAiB5B,oBAAe,GAAkC;MACtDC,UAAU,EAAE,IAAI;MAChB;MACAC,MAAM,EAAE;QACNC,CAAC,EAAE,EACF;QACDC,CAAC,EAAE;OAGJ;MAEDC,OAAO,EAAE;QACPC,MAAM,EAAE;UACNC,OAAO,EAAE;;;KAGd;IACM,iBAAY,GAAc,KAAK;IAE/B,iBAAY,GAAqB;MACtCC,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,CACR;QAAGC,IAAI,EAAE,EAAG;QACRC,KAAK,EAAE,SAAS;QAAGC,aAAa,EAAE;MAAI,CAAE;KAG/C;IA1CC,IAAI,CAACZ,gBAAgB,CAACa,eAAe,EAAE;EACzC;EAGAC,WAAW;IACT,IAAI,CAACd,gBAAgB,CAACe,iBAAiB,EAAE;EAC3C;EAGAC,QAAQ;IACN,IAAI,CAACC,WAAW,CAAC,EAAE,CAAC;IACpB,IAAI,CAACC,aAAa,EAAE;EACtB;EAgCAD,WAAW,CAACE,OAAe;IACzB,IAAI,CAACnB,gBAAgB,CAACiB,WAAW,CAACE,OAAO,CAAC;EAC5C;EAEAC,oBAAoB;IACnB,IAAI,CAACC,YAAY,CAACZ,QAAQ,CAAC,CAAC,CAAC,CAACC,IAAI,CAACY,IAAI,CAAC,IAAI,CAACtB,gBAAgB,CAACuB,UAAU,CAACJ,OAAO,CAAC;IAEjF,IAAI,IAAI,CAACE,YAAY,CAACZ,QAAQ,CAAC,CAAC,CAAC,CAACC,IAAI,CAACc,MAAM,GAAE,EAAE,EAAE;MAClD,IAAI,CAACH,YAAY,CAACZ,QAAQ,CAAC,CAAC,CAAC,CAACC,IAAI,CAACe,KAAK,EAAE;;IAG1C,IAAI,CAACJ,YAAY,EAAEb,MAAM,EAAEc,IAAI,CAAC,GAAI,IAAI,CAACtB,gBAAgB,CAACuB,UAAU,CAACG,IAAK,EAAE,CAAC;IAC7E,IAAI,IAAI,CAACL,YAAY,EAAEb,MAAM,EAAEgB,MAAO,GAAG,EAAE,EAAE;MAC3C,IAAI,CAACH,YAAY,EAAEb,MAAM,EAAEiB,KAAK,EAAE;;IAGpC,IAAI,CAACE,KAAK,EAAEC,MAAM,EAAE;EACtB;EAEAV,aAAa;IACX,MAAMW,UAAU,GAAGC,WAAW,CAAC,MAAK;MAClC,IAAI,CAACV,oBAAoB,EAAE;IAC7B,CAAC,EAAE,GAAG,CAAC;IAEPW,UAAU,CAAC,MAAK;MACdC,aAAa,CAACH,UAAU,CAAC;IAC3B,CAAC,EAAE,QAAQ,CAAC;EACd;;AA1EW/B,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAmC;EAAAC;IAAA;qBAiBjBrC,kBAAkB;;;;;;;;;;;;MC9B/BsC,8BAAuB;MACrBA,4BAIO;MAGTA,iBAAM;;;MANJA,eAAqB;MAArBA,uCAAqB","names":["BaseChartDirective","BarChartComponent","constructor","webSocketService","responsive","scales","x","y","plugins","legend","display","labels","datasets","data","label","barPercentage","conectarWsLento","ngOnDestroy","fecharComunicacao","ngOnInit","sendMessage","startFunction","message","adicionaNovoElemento","barChartData","push","valorAtual","length","shift","time","chart","update","intervalId","setInterval","setTimeout","clearInterval","selectors","viewQuery","i0"],"sourceRoot":"","sources":["/home/pedro/Documentos/demoLab/src/app/bar-chart/bar-chart.component.ts","/home/pedro/Documentos/demoLab/src/app/bar-chart/bar-chart.component.html"],"sourcesContent":["import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { ChartConfiguration, ChartData, ChartEvent, ChartType } from 'chart.js';\nimport { BaseChartDirective } from 'ng2-charts';\nimport { Observable, range } from 'rxjs';\nimport { WebSocketService } from '../web-socket.service';\n\n// import DataLabelsPlugin from 'chartjs-plugin-datalabels';\n\n@Component({\n  selector: 'app-bar-chart',\n  templateUrl: './bar-chart.component.html',\n  styleUrls: [ './bar-chart.component.scss' ],\n})\nexport class BarChartComponent implements OnInit, OnDestroy {\n\n  constructor(public webSocketService: WebSocketService) {\n    this.webSocketService.conectarWsLento();\n  }\n\n\n  ngOnDestroy() {\n    this.webSocketService.fecharComunicacao();\n  }\n\n\n  ngOnInit(): void {\n    this.sendMessage(\"\");\n    this.startFunction();\n  }\n\n  @ViewChild(BaseChartDirective) chart: BaseChartDirective | undefined;\n\n  public barChartOptions: ChartConfiguration['options'] = {\n    responsive: true,\n    // We use these empty structures as placeholders for dynamic theming.\n    scales: {\n      x: {\n      },// ajuste para alterar a largura das barras},\n      y: {\n      },\n\n    },\n\n    plugins: {\n      legend: {\n        display: true,\n      },\n    }\n  };\n  public barChartType: ChartType = 'bar';\n\n  public barChartData: ChartData<'bar'> = {\n    labels: [],\n    datasets: [\n      {  data: [ ]\n        , label: 'Sinal A' , barPercentage: 0.09,}\n    ],\n\n  };\n\n  sendMessage(message: string) {\n    this.webSocketService.sendMessage(message);\n  }\n\n  adicionaNovoElemento(): void {\n   this.barChartData.datasets[0].data.push(this.webSocketService.valorAtual.message);\n\n   if (this.barChartData.datasets[0].data.length> 30) {\n    this.barChartData.datasets[0].data.shift();\n   }\n\n    this.barChartData?.labels?.push(`${ this.webSocketService.valorAtual.time }`);\n    if (this.barChartData?.labels?.length! > 31) {\n      this.barChartData?.labels?.shift();\n    }\n\n    this.chart?.update();\n  }\n\n  startFunction() {\n    const intervalId = setInterval(() => {\n      this.adicionaNovoElemento();\n    }, 500);\n\n    setTimeout(() => {\n      clearInterval(intervalId);\n    }, 30000000);\n  }\n\n  \n}\n\n","<div class=\"container\">\n  <canvas baseChart class=\"chart\"\n  [data]=\"barChartData\"\n  [options]=\"barChartOptions\"\n  [type]=\"barChartType\">\n</canvas>\n\n\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}